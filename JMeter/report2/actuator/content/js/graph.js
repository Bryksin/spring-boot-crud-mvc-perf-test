/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 2749.0, "series": [{"data": [[0.0, 6.0], [0.1, 74.0], [0.2, 81.0], [0.3, 81.0], [0.4, 96.0], [0.5, 101.0], [0.6, 102.0], [0.7, 103.0], [0.8, 104.0], [0.9, 108.0], [1.0, 123.0], [1.1, 130.0], [1.2, 136.0], [1.3, 144.0], [1.4, 144.0], [1.5, 145.0], [1.6, 146.0], [1.7, 146.0], [1.8, 154.0], [1.9, 155.0], [2.0, 155.0], [2.1, 160.0], [2.2, 170.0], [2.3, 172.0], [2.4, 176.0], [2.5, 178.0], [2.6, 178.0], [2.7, 185.0], [2.8, 186.0], [2.9, 187.0], [3.0, 189.0], [3.1, 193.0], [3.2, 198.0], [3.3, 200.0], [3.4, 210.0], [3.5, 210.0], [3.6, 214.0], [3.7, 214.0], [3.8, 217.0], [3.9, 227.0], [4.0, 234.0], [4.1, 236.0], [4.2, 239.0], [4.3, 254.0], [4.4, 263.0], [4.5, 265.0], [4.6, 278.0], [4.7, 280.0], [4.8, 281.0], [4.9, 281.0], [5.0, 283.0], [5.1, 286.0], [5.2, 286.0], [5.3, 295.0], [5.4, 307.0], [5.5, 308.0], [5.6, 314.0], [5.7, 323.0], [5.8, 327.0], [5.9, 327.0], [6.0, 327.0], [6.1, 328.0], [6.2, 330.0], [6.3, 332.0], [6.4, 334.0], [6.5, 346.0], [6.6, 355.0], [6.7, 362.0], [6.8, 374.0], [6.9, 377.0], [7.0, 387.0], [7.1, 390.0], [7.2, 401.0], [7.3, 403.0], [7.4, 412.0], [7.5, 413.0], [7.6, 418.0], [7.7, 421.0], [7.8, 431.0], [7.9, 432.0], [8.0, 436.0], [8.1, 443.0], [8.2, 444.0], [8.3, 444.0], [8.4, 444.0], [8.5, 458.0], [8.6, 458.0], [8.7, 458.0], [8.8, 463.0], [8.9, 468.0], [9.0, 469.0], [9.1, 469.0], [9.2, 481.0], [9.3, 487.0], [9.4, 492.0], [9.5, 495.0], [9.6, 499.0], [9.7, 499.0], [9.8, 502.0], [9.9, 503.0], [10.0, 505.0], [10.1, 506.0], [10.2, 507.0], [10.3, 510.0], [10.4, 511.0], [10.5, 511.0], [10.6, 513.0], [10.7, 513.0], [10.8, 514.0], [10.9, 517.0], [11.0, 523.0], [11.1, 524.0], [11.2, 526.0], [11.3, 530.0], [11.4, 532.0], [11.5, 533.0], [11.6, 540.0], [11.7, 542.0], [11.8, 544.0], [11.9, 547.0], [12.0, 553.0], [12.1, 554.0], [12.2, 554.0], [12.3, 554.0], [12.4, 555.0], [12.5, 555.0], [12.6, 555.0], [12.7, 556.0], [12.8, 558.0], [12.9, 559.0], [13.0, 559.0], [13.1, 559.0], [13.2, 559.0], [13.3, 559.0], [13.4, 560.0], [13.5, 561.0], [13.6, 561.0], [13.7, 564.0], [13.8, 564.0], [13.9, 565.0], [14.0, 567.0], [14.1, 567.0], [14.2, 568.0], [14.3, 568.0], [14.4, 570.0], [14.5, 570.0], [14.6, 570.0], [14.7, 571.0], [14.8, 579.0], [14.9, 580.0], [15.0, 582.0], [15.1, 583.0], [15.2, 584.0], [15.3, 585.0], [15.4, 585.0], [15.5, 586.0], [15.6, 587.0], [15.7, 592.0], [15.8, 593.0], [15.9, 593.0], [16.0, 594.0], [16.1, 597.0], [16.2, 600.0], [16.3, 601.0], [16.4, 603.0], [16.5, 603.0], [16.6, 604.0], [16.7, 605.0], [16.8, 605.0], [16.9, 606.0], [17.0, 607.0], [17.1, 607.0], [17.2, 607.0], [17.3, 610.0], [17.4, 615.0], [17.5, 620.0], [17.6, 621.0], [17.7, 621.0], [17.8, 622.0], [17.9, 624.0], [18.0, 624.0], [18.1, 627.0], [18.2, 628.0], [18.3, 628.0], [18.4, 629.0], [18.5, 629.0], [18.6, 629.0], [18.7, 632.0], [18.8, 633.0], [18.9, 633.0], [19.0, 635.0], [19.1, 636.0], [19.2, 638.0], [19.3, 640.0], [19.4, 640.0], [19.5, 643.0], [19.6, 644.0], [19.7, 645.0], [19.8, 650.0], [19.9, 650.0], [20.0, 651.0], [20.1, 651.0], [20.2, 653.0], [20.3, 654.0], [20.4, 655.0], [20.5, 655.0], [20.6, 656.0], [20.7, 657.0], [20.8, 657.0], [20.9, 657.0], [21.0, 659.0], [21.1, 660.0], [21.2, 661.0], [21.3, 661.0], [21.4, 664.0], [21.5, 667.0], [21.6, 670.0], [21.7, 670.0], [21.8, 671.0], [21.9, 671.0], [22.0, 671.0], [22.1, 672.0], [22.2, 673.0], [22.3, 674.0], [22.4, 674.0], [22.5, 675.0], [22.6, 676.0], [22.7, 676.0], [22.8, 679.0], [22.9, 683.0], [23.0, 684.0], [23.1, 685.0], [23.2, 686.0], [23.3, 686.0], [23.4, 686.0], [23.5, 687.0], [23.6, 687.0], [23.7, 688.0], [23.8, 689.0], [23.9, 690.0], [24.0, 702.0], [24.1, 703.0], [24.2, 707.0], [24.3, 708.0], [24.4, 710.0], [24.5, 711.0], [24.6, 711.0], [24.7, 712.0], [24.8, 713.0], [24.9, 714.0], [25.0, 714.0], [25.1, 715.0], [25.2, 715.0], [25.3, 718.0], [25.4, 721.0], [25.5, 725.0], [25.6, 726.0], [25.7, 727.0], [25.8, 729.0], [25.9, 729.0], [26.0, 732.0], [26.1, 736.0], [26.2, 736.0], [26.3, 737.0], [26.4, 737.0], [26.5, 738.0], [26.6, 739.0], [26.7, 740.0], [26.8, 742.0], [26.9, 749.0], [27.0, 750.0], [27.1, 751.0], [27.2, 751.0], [27.3, 752.0], [27.4, 753.0], [27.5, 755.0], [27.6, 756.0], [27.7, 756.0], [27.8, 758.0], [27.9, 758.0], [28.0, 758.0], [28.1, 759.0], [28.2, 761.0], [28.3, 762.0], [28.4, 763.0], [28.5, 763.0], [28.6, 763.0], [28.7, 766.0], [28.8, 766.0], [28.9, 766.0], [29.0, 769.0], [29.1, 772.0], [29.2, 775.0], [29.3, 775.0], [29.4, 777.0], [29.5, 777.0], [29.6, 777.0], [29.7, 777.0], [29.8, 779.0], [29.9, 780.0], [30.0, 780.0], [30.1, 780.0], [30.2, 781.0], [30.3, 782.0], [30.4, 783.0], [30.5, 783.0], [30.6, 785.0], [30.7, 786.0], [30.8, 787.0], [30.9, 789.0], [31.0, 789.0], [31.1, 789.0], [31.2, 790.0], [31.3, 790.0], [31.4, 792.0], [31.5, 792.0], [31.6, 793.0], [31.7, 794.0], [31.8, 794.0], [31.9, 794.0], [32.0, 795.0], [32.1, 799.0], [32.2, 800.0], [32.3, 800.0], [32.4, 800.0], [32.5, 800.0], [32.6, 802.0], [32.7, 802.0], [32.8, 802.0], [32.9, 802.0], [33.0, 803.0], [33.1, 804.0], [33.2, 805.0], [33.3, 806.0], [33.4, 806.0], [33.5, 807.0], [33.6, 807.0], [33.7, 807.0], [33.8, 809.0], [33.9, 810.0], [34.0, 810.0], [34.1, 810.0], [34.2, 810.0], [34.3, 812.0], [34.4, 812.0], [34.5, 812.0], [34.6, 812.0], [34.7, 814.0], [34.8, 815.0], [34.9, 815.0], [35.0, 819.0], [35.1, 819.0], [35.2, 819.0], [35.3, 819.0], [35.4, 823.0], [35.5, 824.0], [35.6, 824.0], [35.7, 824.0], [35.8, 825.0], [35.9, 826.0], [36.0, 827.0], [36.1, 827.0], [36.2, 828.0], [36.3, 830.0], [36.4, 831.0], [36.5, 832.0], [36.6, 832.0], [36.7, 834.0], [36.8, 834.0], [36.9, 834.0], [37.0, 836.0], [37.1, 839.0], [37.2, 839.0], [37.3, 840.0], [37.4, 842.0], [37.5, 842.0], [37.6, 846.0], [37.7, 846.0], [37.8, 847.0], [37.9, 847.0], [38.0, 850.0], [38.1, 853.0], [38.2, 854.0], [38.3, 854.0], [38.4, 856.0], [38.5, 856.0], [38.6, 856.0], [38.7, 858.0], [38.8, 858.0], [38.9, 862.0], [39.0, 863.0], [39.1, 865.0], [39.2, 866.0], [39.3, 868.0], [39.4, 868.0], [39.5, 869.0], [39.6, 871.0], [39.7, 871.0], [39.8, 873.0], [39.9, 873.0], [40.0, 873.0], [40.1, 873.0], [40.2, 875.0], [40.3, 875.0], [40.4, 876.0], [40.5, 878.0], [40.6, 879.0], [40.7, 881.0], [40.8, 883.0], [40.9, 883.0], [41.0, 885.0], [41.1, 885.0], [41.2, 887.0], [41.3, 888.0], [41.4, 889.0], [41.5, 889.0], [41.6, 890.0], [41.7, 894.0], [41.8, 895.0], [41.9, 897.0], [42.0, 898.0], [42.1, 900.0], [42.2, 900.0], [42.3, 901.0], [42.4, 901.0], [42.5, 903.0], [42.6, 903.0], [42.7, 903.0], [42.8, 903.0], [42.9, 905.0], [43.0, 906.0], [43.1, 906.0], [43.2, 908.0], [43.3, 908.0], [43.4, 908.0], [43.5, 922.0], [43.6, 925.0], [43.7, 926.0], [43.8, 927.0], [43.9, 928.0], [44.0, 928.0], [44.1, 929.0], [44.2, 929.0], [44.3, 930.0], [44.4, 930.0], [44.5, 931.0], [44.6, 933.0], [44.7, 933.0], [44.8, 934.0], [44.9, 935.0], [45.0, 935.0], [45.1, 936.0], [45.2, 936.0], [45.3, 937.0], [45.4, 937.0], [45.5, 941.0], [45.6, 946.0], [45.7, 947.0], [45.8, 949.0], [45.9, 949.0], [46.0, 951.0], [46.1, 952.0], [46.2, 953.0], [46.3, 954.0], [46.4, 956.0], [46.5, 957.0], [46.6, 957.0], [46.7, 961.0], [46.8, 961.0], [46.9, 964.0], [47.0, 966.0], [47.1, 968.0], [47.2, 969.0], [47.3, 969.0], [47.4, 969.0], [47.5, 971.0], [47.6, 971.0], [47.7, 972.0], [47.8, 973.0], [47.9, 974.0], [48.0, 974.0], [48.1, 974.0], [48.2, 975.0], [48.3, 975.0], [48.4, 976.0], [48.5, 977.0], [48.6, 978.0], [48.7, 978.0], [48.8, 978.0], [48.9, 979.0], [49.0, 979.0], [49.1, 979.0], [49.2, 980.0], [49.3, 980.0], [49.4, 981.0], [49.5, 981.0], [49.6, 981.0], [49.7, 981.0], [49.8, 982.0], [49.9, 982.0], [50.0, 982.0], [50.1, 983.0], [50.2, 983.0], [50.3, 983.0], [50.4, 983.0], [50.5, 984.0], [50.6, 984.0], [50.7, 984.0], [50.8, 985.0], [50.9, 985.0], [51.0, 986.0], [51.1, 986.0], [51.2, 987.0], [51.3, 987.0], [51.4, 987.0], [51.5, 988.0], [51.6, 988.0], [51.7, 988.0], [51.8, 988.0], [51.9, 989.0], [52.0, 989.0], [52.1, 989.0], [52.2, 990.0], [52.3, 990.0], [52.4, 991.0], [52.5, 991.0], [52.6, 991.0], [52.7, 991.0], [52.8, 992.0], [52.9, 992.0], [53.0, 994.0], [53.1, 996.0], [53.2, 996.0], [53.3, 998.0], [53.4, 999.0], [53.5, 1000.0], [53.6, 1001.0], [53.7, 1003.0], [53.8, 1003.0], [53.9, 1004.0], [54.0, 1005.0], [54.1, 1005.0], [54.2, 1006.0], [54.3, 1009.0], [54.4, 1010.0], [54.5, 1010.0], [54.6, 1011.0], [54.7, 1014.0], [54.8, 1018.0], [54.9, 1018.0], [55.0, 1020.0], [55.1, 1020.0], [55.2, 1022.0], [55.3, 1022.0], [55.4, 1022.0], [55.5, 1022.0], [55.6, 1022.0], [55.7, 1023.0], [55.8, 1024.0], [55.9, 1027.0], [56.0, 1028.0], [56.1, 1028.0], [56.2, 1030.0], [56.3, 1030.0], [56.4, 1031.0], [56.5, 1031.0], [56.6, 1031.0], [56.7, 1032.0], [56.8, 1033.0], [56.9, 1033.0], [57.0, 1034.0], [57.1, 1035.0], [57.2, 1035.0], [57.3, 1036.0], [57.4, 1037.0], [57.5, 1037.0], [57.6, 1038.0], [57.7, 1038.0], [57.8, 1038.0], [57.9, 1039.0], [58.0, 1041.0], [58.1, 1042.0], [58.2, 1043.0], [58.3, 1044.0], [58.4, 1047.0], [58.5, 1048.0], [58.6, 1050.0], [58.7, 1050.0], [58.8, 1055.0], [58.9, 1056.0], [59.0, 1056.0], [59.1, 1057.0], [59.2, 1059.0], [59.3, 1060.0], [59.4, 1060.0], [59.5, 1061.0], [59.6, 1068.0], [59.7, 1068.0], [59.8, 1068.0], [59.9, 1069.0], [60.0, 1071.0], [60.1, 1072.0], [60.2, 1072.0], [60.3, 1076.0], [60.4, 1077.0], [60.5, 1079.0], [60.6, 1084.0], [60.7, 1084.0], [60.8, 1084.0], [60.9, 1089.0], [61.0, 1090.0], [61.1, 1091.0], [61.2, 1091.0], [61.3, 1094.0], [61.4, 1094.0], [61.5, 1094.0], [61.6, 1096.0], [61.7, 1097.0], [61.8, 1099.0], [61.9, 1100.0], [62.0, 1102.0], [62.1, 1102.0], [62.2, 1104.0], [62.3, 1106.0], [62.4, 1107.0], [62.5, 1108.0], [62.6, 1109.0], [62.7, 1113.0], [62.8, 1115.0], [62.9, 1116.0], [63.0, 1117.0], [63.1, 1121.0], [63.2, 1126.0], [63.3, 1126.0], [63.4, 1128.0], [63.5, 1129.0], [63.6, 1129.0], [63.7, 1129.0], [63.8, 1130.0], [63.9, 1130.0], [64.0, 1131.0], [64.1, 1132.0], [64.2, 1133.0], [64.3, 1134.0], [64.4, 1142.0], [64.5, 1147.0], [64.6, 1147.0], [64.7, 1149.0], [64.8, 1149.0], [64.9, 1149.0], [65.0, 1151.0], [65.1, 1152.0], [65.2, 1153.0], [65.3, 1153.0], [65.4, 1154.0], [65.5, 1154.0], [65.6, 1154.0], [65.7, 1155.0], [65.8, 1157.0], [65.9, 1158.0], [66.0, 1160.0], [66.1, 1161.0], [66.2, 1165.0], [66.3, 1166.0], [66.4, 1168.0], [66.5, 1170.0], [66.6, 1173.0], [66.7, 1175.0], [66.8, 1180.0], [66.9, 1180.0], [67.0, 1181.0], [67.1, 1183.0], [67.2, 1187.0], [67.3, 1187.0], [67.4, 1188.0], [67.5, 1189.0], [67.6, 1192.0], [67.7, 1192.0], [67.8, 1198.0], [67.9, 1199.0], [68.0, 1199.0], [68.1, 1200.0], [68.2, 1202.0], [68.3, 1202.0], [68.4, 1205.0], [68.5, 1206.0], [68.6, 1207.0], [68.7, 1210.0], [68.8, 1211.0], [68.9, 1213.0], [69.0, 1213.0], [69.1, 1216.0], [69.2, 1218.0], [69.3, 1218.0], [69.4, 1219.0], [69.5, 1221.0], [69.6, 1221.0], [69.7, 1222.0], [69.8, 1223.0], [69.9, 1224.0], [70.0, 1225.0], [70.1, 1225.0], [70.2, 1226.0], [70.3, 1226.0], [70.4, 1227.0], [70.5, 1228.0], [70.6, 1228.0], [70.7, 1229.0], [70.8, 1231.0], [70.9, 1233.0], [71.0, 1234.0], [71.1, 1234.0], [71.2, 1237.0], [71.3, 1239.0], [71.4, 1240.0], [71.5, 1241.0], [71.6, 1244.0], [71.7, 1244.0], [71.8, 1245.0], [71.9, 1247.0], [72.0, 1250.0], [72.1, 1250.0], [72.2, 1255.0], [72.3, 1255.0], [72.4, 1258.0], [72.5, 1260.0], [72.6, 1260.0], [72.7, 1261.0], [72.8, 1263.0], [72.9, 1268.0], [73.0, 1269.0], [73.1, 1270.0], [73.2, 1272.0], [73.3, 1272.0], [73.4, 1272.0], [73.5, 1275.0], [73.6, 1276.0], [73.7, 1276.0], [73.8, 1277.0], [73.9, 1285.0], [74.0, 1288.0], [74.1, 1289.0], [74.2, 1289.0], [74.3, 1290.0], [74.4, 1291.0], [74.5, 1291.0], [74.6, 1294.0], [74.7, 1295.0], [74.8, 1297.0], [74.9, 1299.0], [75.0, 1299.0], [75.1, 1299.0], [75.2, 1299.0], [75.3, 1299.0], [75.4, 1300.0], [75.5, 1300.0], [75.6, 1304.0], [75.7, 1305.0], [75.8, 1305.0], [75.9, 1310.0], [76.0, 1310.0], [76.1, 1314.0], [76.2, 1317.0], [76.3, 1322.0], [76.4, 1324.0], [76.5, 1326.0], [76.6, 1328.0], [76.7, 1335.0], [76.8, 1337.0], [76.9, 1340.0], [77.0, 1341.0], [77.1, 1341.0], [77.2, 1343.0], [77.3, 1350.0], [77.4, 1351.0], [77.5, 1351.0], [77.6, 1352.0], [77.7, 1354.0], [77.8, 1359.0], [77.9, 1363.0], [78.0, 1366.0], [78.1, 1367.0], [78.2, 1369.0], [78.3, 1369.0], [78.4, 1369.0], [78.5, 1371.0], [78.6, 1372.0], [78.7, 1376.0], [78.8, 1377.0], [78.9, 1377.0], [79.0, 1378.0], [79.1, 1379.0], [79.2, 1381.0], [79.3, 1383.0], [79.4, 1383.0], [79.5, 1383.0], [79.6, 1384.0], [79.7, 1386.0], [79.8, 1388.0], [79.9, 1393.0], [80.0, 1393.0], [80.1, 1395.0], [80.2, 1398.0], [80.3, 1398.0], [80.4, 1398.0], [80.5, 1399.0], [80.6, 1402.0], [80.7, 1405.0], [80.8, 1406.0], [80.9, 1410.0], [81.0, 1410.0], [81.1, 1411.0], [81.2, 1416.0], [81.3, 1418.0], [81.4, 1422.0], [81.5, 1425.0], [81.6, 1429.0], [81.7, 1430.0], [81.8, 1431.0], [81.9, 1432.0], [82.0, 1433.0], [82.1, 1435.0], [82.2, 1441.0], [82.3, 1444.0], [82.4, 1446.0], [82.5, 1446.0], [82.6, 1447.0], [82.7, 1450.0], [82.8, 1451.0], [82.9, 1462.0], [83.0, 1470.0], [83.1, 1471.0], [83.2, 1472.0], [83.3, 1474.0], [83.4, 1483.0], [83.5, 1488.0], [83.6, 1493.0], [83.7, 1498.0], [83.8, 1498.0], [83.9, 1498.0], [84.0, 1499.0], [84.1, 1499.0], [84.2, 1509.0], [84.3, 1515.0], [84.4, 1518.0], [84.5, 1521.0], [84.6, 1522.0], [84.7, 1522.0], [84.8, 1529.0], [84.9, 1529.0], [85.0, 1534.0], [85.1, 1535.0], [85.2, 1536.0], [85.3, 1539.0], [85.4, 1541.0], [85.5, 1553.0], [85.6, 1563.0], [85.7, 1569.0], [85.8, 1579.0], [85.9, 1580.0], [86.0, 1590.0], [86.1, 1599.0], [86.2, 1600.0], [86.3, 1603.0], [86.4, 1605.0], [86.5, 1611.0], [86.6, 1611.0], [86.7, 1614.0], [86.8, 1617.0], [86.9, 1618.0], [87.0, 1623.0], [87.1, 1625.0], [87.2, 1627.0], [87.3, 1627.0], [87.4, 1629.0], [87.5, 1632.0], [87.6, 1632.0], [87.7, 1632.0], [87.8, 1633.0], [87.9, 1634.0], [88.0, 1645.0], [88.1, 1648.0], [88.2, 1651.0], [88.3, 1653.0], [88.4, 1657.0], [88.5, 1661.0], [88.6, 1662.0], [88.7, 1674.0], [88.8, 1677.0], [88.9, 1678.0], [89.0, 1682.0], [89.1, 1684.0], [89.2, 1690.0], [89.3, 1691.0], [89.4, 1702.0], [89.5, 1704.0], [89.6, 1705.0], [89.7, 1708.0], [89.8, 1710.0], [89.9, 1714.0], [90.0, 1720.0], [90.1, 1720.0], [90.2, 1723.0], [90.3, 1732.0], [90.4, 1736.0], [90.5, 1742.0], [90.6, 1747.0], [90.7, 1748.0], [90.8, 1750.0], [90.9, 1758.0], [91.0, 1758.0], [91.1, 1761.0], [91.2, 1764.0], [91.3, 1766.0], [91.4, 1767.0], [91.5, 1772.0], [91.6, 1774.0], [91.7, 1777.0], [91.8, 1783.0], [91.9, 1785.0], [92.0, 1786.0], [92.1, 1786.0], [92.2, 1789.0], [92.3, 1798.0], [92.4, 1801.0], [92.5, 1802.0], [92.6, 1812.0], [92.7, 1817.0], [92.8, 1818.0], [92.9, 1822.0], [93.0, 1823.0], [93.1, 1823.0], [93.2, 1823.0], [93.3, 1824.0], [93.4, 1826.0], [93.5, 1827.0], [93.6, 1827.0], [93.7, 1835.0], [93.8, 1835.0], [93.9, 1837.0], [94.0, 1840.0], [94.1, 1840.0], [94.2, 1844.0], [94.3, 1845.0], [94.4, 1845.0], [94.5, 1845.0], [94.6, 1846.0], [94.7, 1846.0], [94.8, 1848.0], [94.9, 1848.0], [95.0, 1850.0], [95.1, 1853.0], [95.2, 1855.0], [95.3, 1856.0], [95.4, 1858.0], [95.5, 1858.0], [95.6, 1860.0], [95.7, 1860.0], [95.8, 1864.0], [95.9, 1868.0], [96.0, 1868.0], [96.1, 1869.0], [96.2, 1870.0], [96.3, 1871.0], [96.4, 1872.0], [96.5, 1874.0], [96.6, 1880.0], [96.7, 1880.0], [96.8, 1880.0], [96.9, 1882.0], [97.0, 1885.0], [97.1, 1888.0], [97.2, 1889.0], [97.3, 1890.0], [97.4, 1893.0], [97.5, 1896.0], [97.6, 1897.0], [97.7, 1900.0], [97.8, 1900.0], [97.9, 1908.0], [98.0, 1910.0], [98.1, 1910.0], [98.2, 1918.0], [98.3, 1922.0], [98.4, 1932.0], [98.5, 1933.0], [98.6, 1937.0], [98.7, 2026.0], [98.8, 2047.0], [98.9, 2060.0], [99.0, 2065.0], [99.1, 2067.0], [99.2, 2068.0], [99.3, 2087.0], [99.4, 2089.0], [99.5, 2098.0], [99.6, 2115.0], [99.7, 2138.0], [99.8, 2160.0], [99.9, 2413.0]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[0.0, 212.0], [0.1, 222.0], [0.2, 225.0], [0.3, 225.0], [0.4, 263.0], [0.5, 283.0], [0.6, 285.0], [0.7, 292.0], [0.8, 312.0], [0.9, 315.0], [1.0, 319.0], [1.1, 319.0], [1.2, 320.0], [1.3, 325.0], [1.4, 325.0], [1.5, 326.0], [1.6, 330.0], [1.7, 337.0], [1.8, 340.0], [1.9, 341.0], [2.0, 346.0], [2.1, 347.0], [2.2, 347.0], [2.3, 349.0], [2.4, 353.0], [2.5, 357.0], [2.6, 357.0], [2.7, 364.0], [2.8, 365.0], [2.9, 367.0], [3.0, 369.0], [3.1, 369.0], [3.2, 371.0], [3.3, 378.0], [3.4, 385.0], [3.5, 387.0], [3.6, 391.0], [3.7, 393.0], [3.8, 394.0], [3.9, 394.0], [4.0, 397.0], [4.1, 399.0], [4.2, 401.0], [4.3, 401.0], [4.4, 402.0], [4.5, 414.0], [4.6, 415.0], [4.7, 424.0], [4.8, 425.0], [4.9, 426.0], [5.0, 433.0], [5.1, 434.0], [5.2, 434.0], [5.3, 435.0], [5.4, 436.0], [5.5, 437.0], [5.6, 439.0], [5.7, 439.0], [5.8, 443.0], [5.9, 443.0], [6.0, 445.0], [6.1, 455.0], [6.2, 461.0], [6.3, 461.0], [6.4, 461.0], [6.5, 463.0], [6.6, 467.0], [6.7, 467.0], [6.8, 468.0], [6.9, 474.0], [7.0, 477.0], [7.1, 480.0], [7.2, 485.0], [7.3, 486.0], [7.4, 487.0], [7.5, 488.0], [7.6, 490.0], [7.7, 491.0], [7.8, 492.0], [7.9, 492.0], [8.0, 498.0], [8.1, 500.0], [8.2, 502.0], [8.3, 504.0], [8.4, 507.0], [8.5, 508.0], [8.6, 510.0], [8.7, 511.0], [8.8, 512.0], [8.9, 515.0], [9.0, 519.0], [9.1, 526.0], [9.2, 526.0], [9.3, 528.0], [9.4, 531.0], [9.5, 534.0], [9.6, 536.0], [9.7, 540.0], [9.8, 545.0], [9.9, 545.0], [10.0, 546.0], [10.1, 548.0], [10.2, 548.0], [10.3, 550.0], [10.4, 557.0], [10.5, 559.0], [10.6, 564.0], [10.7, 569.0], [10.8, 570.0], [10.9, 572.0], [11.0, 574.0], [11.1, 574.0], [11.2, 574.0], [11.3, 575.0], [11.4, 576.0], [11.5, 577.0], [11.6, 579.0], [11.7, 580.0], [11.8, 583.0], [11.9, 584.0], [12.0, 587.0], [12.1, 588.0], [12.2, 589.0], [12.3, 590.0], [12.4, 603.0], [12.5, 603.0], [12.6, 605.0], [12.7, 605.0], [12.8, 607.0], [12.9, 607.0], [13.0, 609.0], [13.1, 611.0], [13.2, 612.0], [13.3, 612.0], [13.4, 615.0], [13.5, 616.0], [13.6, 617.0], [13.7, 619.0], [13.8, 620.0], [13.9, 622.0], [14.0, 624.0], [14.1, 625.0], [14.2, 626.0], [14.3, 627.0], [14.4, 629.0], [14.5, 629.0], [14.6, 631.0], [14.7, 634.0], [14.8, 635.0], [14.9, 640.0], [15.0, 646.0], [15.1, 647.0], [15.2, 648.0], [15.3, 651.0], [15.4, 651.0], [15.5, 654.0], [15.6, 656.0], [15.7, 657.0], [15.8, 663.0], [15.9, 667.0], [16.0, 672.0], [16.1, 674.0], [16.2, 676.0], [16.3, 680.0], [16.4, 680.0], [16.5, 681.0], [16.6, 682.0], [16.7, 682.0], [16.8, 683.0], [16.9, 684.0], [17.0, 686.0], [17.1, 686.0], [17.2, 688.0], [17.3, 688.0], [17.4, 689.0], [17.5, 689.0], [17.6, 689.0], [17.7, 689.0], [17.8, 690.0], [17.9, 690.0], [18.0, 690.0], [18.1, 692.0], [18.2, 692.0], [18.3, 694.0], [18.4, 696.0], [18.5, 696.0], [18.6, 697.0], [18.7, 697.0], [18.8, 703.0], [18.9, 703.0], [19.0, 703.0], [19.1, 705.0], [19.2, 709.0], [19.3, 709.0], [19.4, 711.0], [19.5, 711.0], [19.6, 712.0], [19.7, 712.0], [19.8, 712.0], [19.9, 715.0], [20.0, 716.0], [20.1, 720.0], [20.2, 723.0], [20.3, 724.0], [20.4, 724.0], [20.5, 724.0], [20.6, 725.0], [20.7, 728.0], [20.8, 728.0], [20.9, 729.0], [21.0, 729.0], [21.1, 734.0], [21.2, 736.0], [21.3, 736.0], [21.4, 736.0], [21.5, 736.0], [21.6, 737.0], [21.7, 740.0], [21.8, 740.0], [21.9, 744.0], [22.0, 746.0], [22.1, 746.0], [22.2, 749.0], [22.3, 751.0], [22.4, 753.0], [22.5, 754.0], [22.6, 755.0], [22.7, 755.0], [22.8, 759.0], [22.9, 759.0], [23.0, 762.0], [23.1, 764.0], [23.2, 764.0], [23.3, 765.0], [23.4, 766.0], [23.5, 766.0], [23.6, 766.0], [23.7, 767.0], [23.8, 771.0], [23.9, 771.0], [24.0, 772.0], [24.1, 776.0], [24.2, 777.0], [24.3, 778.0], [24.4, 778.0], [24.5, 778.0], [24.6, 782.0], [24.7, 783.0], [24.8, 783.0], [24.9, 785.0], [25.0, 786.0], [25.1, 787.0], [25.2, 787.0], [25.3, 788.0], [25.4, 789.0], [25.5, 790.0], [25.6, 790.0], [25.7, 791.0], [25.8, 791.0], [25.9, 791.0], [26.0, 794.0], [26.1, 795.0], [26.2, 795.0], [26.3, 795.0], [26.4, 795.0], [26.5, 796.0], [26.6, 797.0], [26.7, 797.0], [26.8, 802.0], [26.9, 802.0], [27.0, 803.0], [27.1, 804.0], [27.2, 805.0], [27.3, 805.0], [27.4, 806.0], [27.5, 808.0], [27.6, 808.0], [27.7, 811.0], [27.8, 812.0], [27.9, 813.0], [28.0, 814.0], [28.1, 815.0], [28.2, 820.0], [28.3, 821.0], [28.4, 823.0], [28.5, 824.0], [28.6, 826.0], [28.7, 826.0], [28.8, 827.0], [28.9, 829.0], [29.0, 830.0], [29.1, 831.0], [29.2, 834.0], [29.3, 835.0], [29.4, 835.0], [29.5, 837.0], [29.6, 839.0], [29.7, 840.0], [29.8, 841.0], [29.9, 843.0], [30.0, 844.0], [30.1, 845.0], [30.2, 845.0], [30.3, 846.0], [30.4, 846.0], [30.5, 847.0], [30.6, 847.0], [30.7, 849.0], [30.8, 850.0], [30.9, 851.0], [31.0, 852.0], [31.1, 853.0], [31.2, 854.0], [31.3, 854.0], [31.4, 855.0], [31.5, 856.0], [31.6, 856.0], [31.7, 857.0], [31.8, 858.0], [31.9, 858.0], [32.0, 859.0], [32.1, 860.0], [32.2, 861.0], [32.3, 864.0], [32.4, 865.0], [32.5, 865.0], [32.6, 867.0], [32.7, 867.0], [32.8, 867.0], [32.9, 870.0], [33.0, 870.0], [33.1, 871.0], [33.2, 871.0], [33.3, 872.0], [33.4, 873.0], [33.5, 873.0], [33.6, 874.0], [33.7, 874.0], [33.8, 874.0], [33.9, 875.0], [34.0, 877.0], [34.1, 877.0], [34.2, 877.0], [34.3, 877.0], [34.4, 879.0], [34.5, 880.0], [34.6, 881.0], [34.7, 883.0], [34.8, 883.0], [34.9, 885.0], [35.0, 885.0], [35.1, 885.0], [35.2, 885.0], [35.3, 887.0], [35.4, 887.0], [35.5, 887.0], [35.6, 887.0], [35.7, 887.0], [35.8, 887.0], [35.9, 887.0], [36.0, 888.0], [36.1, 888.0], [36.2, 889.0], [36.3, 890.0], [36.4, 893.0], [36.5, 894.0], [36.6, 896.0], [36.7, 899.0], [36.8, 899.0], [36.9, 899.0], [37.0, 899.0], [37.1, 900.0], [37.2, 903.0], [37.3, 903.0], [37.4, 903.0], [37.5, 904.0], [37.6, 905.0], [37.7, 905.0], [37.8, 905.0], [37.9, 906.0], [38.0, 907.0], [38.1, 908.0], [38.2, 909.0], [38.3, 911.0], [38.4, 911.0], [38.5, 911.0], [38.6, 913.0], [38.7, 914.0], [38.8, 914.0], [38.9, 915.0], [39.0, 915.0], [39.1, 915.0], [39.2, 918.0], [39.3, 920.0], [39.4, 921.0], [39.5, 922.0], [39.6, 923.0], [39.7, 923.0], [39.8, 924.0], [39.9, 924.0], [40.0, 925.0], [40.1, 925.0], [40.2, 928.0], [40.3, 928.0], [40.4, 928.0], [40.5, 928.0], [40.6, 928.0], [40.7, 929.0], [40.8, 929.0], [40.9, 930.0], [41.0, 931.0], [41.1, 932.0], [41.2, 932.0], [41.3, 933.0], [41.4, 934.0], [41.5, 935.0], [41.6, 935.0], [41.7, 936.0], [41.8, 937.0], [41.9, 937.0], [42.0, 940.0], [42.1, 941.0], [42.2, 941.0], [42.3, 942.0], [42.4, 942.0], [42.5, 942.0], [42.6, 944.0], [42.7, 945.0], [42.8, 946.0], [42.9, 946.0], [43.0, 946.0], [43.1, 948.0], [43.2, 948.0], [43.3, 949.0], [43.4, 950.0], [43.5, 951.0], [43.6, 951.0], [43.7, 956.0], [43.8, 956.0], [43.9, 957.0], [44.0, 958.0], [44.1, 959.0], [44.2, 959.0], [44.3, 963.0], [44.4, 963.0], [44.5, 966.0], [44.6, 966.0], [44.7, 967.0], [44.8, 967.0], [44.9, 968.0], [45.0, 968.0], [45.1, 968.0], [45.2, 972.0], [45.3, 972.0], [45.4, 975.0], [45.5, 975.0], [45.6, 977.0], [45.7, 982.0], [45.8, 983.0], [45.9, 984.0], [46.0, 986.0], [46.1, 986.0], [46.2, 986.0], [46.3, 987.0], [46.4, 987.0], [46.5, 991.0], [46.6, 993.0], [46.7, 993.0], [46.8, 994.0], [46.9, 994.0], [47.0, 996.0], [47.1, 996.0], [47.2, 997.0], [47.3, 997.0], [47.4, 997.0], [47.5, 998.0], [47.6, 998.0], [47.7, 1000.0], [47.8, 1001.0], [47.9, 1001.0], [48.0, 1002.0], [48.1, 1002.0], [48.2, 1002.0], [48.3, 1003.0], [48.4, 1003.0], [48.5, 1003.0], [48.6, 1005.0], [48.7, 1005.0], [48.8, 1006.0], [48.9, 1007.0], [49.0, 1007.0], [49.1, 1010.0], [49.2, 1011.0], [49.3, 1011.0], [49.4, 1011.0], [49.5, 1015.0], [49.6, 1015.0], [49.7, 1015.0], [49.8, 1017.0], [49.9, 1018.0], [50.0, 1018.0], [50.1, 1019.0], [50.2, 1020.0], [50.3, 1021.0], [50.4, 1022.0], [50.5, 1022.0], [50.6, 1023.0], [50.7, 1023.0], [50.8, 1023.0], [50.9, 1023.0], [51.0, 1024.0], [51.1, 1024.0], [51.2, 1025.0], [51.3, 1026.0], [51.4, 1026.0], [51.5, 1026.0], [51.6, 1027.0], [51.7, 1029.0], [51.8, 1033.0], [51.9, 1033.0], [52.0, 1035.0], [52.1, 1037.0], [52.2, 1038.0], [52.3, 1038.0], [52.4, 1038.0], [52.5, 1039.0], [52.6, 1040.0], [52.7, 1042.0], [52.8, 1044.0], [52.9, 1047.0], [53.0, 1047.0], [53.1, 1047.0], [53.2, 1048.0], [53.3, 1049.0], [53.4, 1049.0], [53.5, 1049.0], [53.6, 1049.0], [53.7, 1049.0], [53.8, 1050.0], [53.9, 1051.0], [54.0, 1053.0], [54.1, 1053.0], [54.2, 1055.0], [54.3, 1055.0], [54.4, 1055.0], [54.5, 1055.0], [54.6, 1057.0], [54.7, 1057.0], [54.8, 1057.0], [54.9, 1057.0], [55.0, 1062.0], [55.1, 1064.0], [55.2, 1065.0], [55.3, 1065.0], [55.4, 1066.0], [55.5, 1066.0], [55.6, 1066.0], [55.7, 1067.0], [55.8, 1068.0], [55.9, 1069.0], [56.0, 1069.0], [56.1, 1070.0], [56.2, 1072.0], [56.3, 1072.0], [56.4, 1072.0], [56.5, 1074.0], [56.6, 1075.0], [56.7, 1075.0], [56.8, 1076.0], [56.9, 1077.0], [57.0, 1079.0], [57.1, 1080.0], [57.2, 1082.0], [57.3, 1082.0], [57.4, 1083.0], [57.5, 1083.0], [57.6, 1084.0], [57.7, 1085.0], [57.8, 1086.0], [57.9, 1087.0], [58.0, 1088.0], [58.1, 1089.0], [58.2, 1090.0], [58.3, 1091.0], [58.4, 1091.0], [58.5, 1092.0], [58.6, 1092.0], [58.7, 1093.0], [58.8, 1093.0], [58.9, 1093.0], [59.0, 1093.0], [59.1, 1095.0], [59.2, 1097.0], [59.3, 1097.0], [59.4, 1098.0], [59.5, 1100.0], [59.6, 1100.0], [59.7, 1102.0], [59.8, 1102.0], [59.9, 1102.0], [60.0, 1104.0], [60.1, 1104.0], [60.2, 1104.0], [60.3, 1105.0], [60.4, 1106.0], [60.5, 1106.0], [60.6, 1110.0], [60.7, 1110.0], [60.8, 1111.0], [60.9, 1113.0], [61.0, 1114.0], [61.1, 1114.0], [61.2, 1114.0], [61.3, 1115.0], [61.4, 1115.0], [61.5, 1116.0], [61.6, 1117.0], [61.7, 1117.0], [61.8, 1117.0], [61.9, 1118.0], [62.0, 1118.0], [62.1, 1118.0], [62.2, 1120.0], [62.3, 1121.0], [62.4, 1121.0], [62.5, 1122.0], [62.6, 1122.0], [62.7, 1124.0], [62.8, 1124.0], [62.9, 1124.0], [63.0, 1125.0], [63.1, 1127.0], [63.2, 1129.0], [63.3, 1129.0], [63.4, 1129.0], [63.5, 1130.0], [63.6, 1131.0], [63.7, 1131.0], [63.8, 1132.0], [63.9, 1132.0], [64.0, 1133.0], [64.1, 1133.0], [64.2, 1137.0], [64.3, 1137.0], [64.4, 1138.0], [64.5, 1138.0], [64.6, 1139.0], [64.7, 1140.0], [64.8, 1141.0], [64.9, 1142.0], [65.0, 1142.0], [65.1, 1143.0], [65.2, 1144.0], [65.3, 1145.0], [65.4, 1145.0], [65.5, 1147.0], [65.6, 1147.0], [65.7, 1148.0], [65.8, 1148.0], [65.9, 1148.0], [66.0, 1152.0], [66.1, 1152.0], [66.2, 1152.0], [66.3, 1152.0], [66.4, 1153.0], [66.5, 1153.0], [66.6, 1154.0], [66.7, 1155.0], [66.8, 1157.0], [66.9, 1157.0], [67.0, 1157.0], [67.1, 1159.0], [67.2, 1159.0], [67.3, 1159.0], [67.4, 1160.0], [67.5, 1160.0], [67.6, 1161.0], [67.7, 1161.0], [67.8, 1162.0], [67.9, 1163.0], [68.0, 1164.0], [68.1, 1164.0], [68.2, 1164.0], [68.3, 1165.0], [68.4, 1166.0], [68.5, 1168.0], [68.6, 1169.0], [68.7, 1169.0], [68.8, 1170.0], [68.9, 1171.0], [69.0, 1173.0], [69.1, 1174.0], [69.2, 1174.0], [69.3, 1176.0], [69.4, 1176.0], [69.5, 1177.0], [69.6, 1177.0], [69.7, 1177.0], [69.8, 1178.0], [69.9, 1178.0], [70.0, 1179.0], [70.1, 1180.0], [70.2, 1180.0], [70.3, 1181.0], [70.4, 1181.0], [70.5, 1182.0], [70.6, 1182.0], [70.7, 1183.0], [70.8, 1184.0], [70.9, 1186.0], [71.0, 1186.0], [71.1, 1188.0], [71.2, 1188.0], [71.3, 1190.0], [71.4, 1192.0], [71.5, 1193.0], [71.6, 1196.0], [71.7, 1196.0], [71.8, 1198.0], [71.9, 1200.0], [72.0, 1201.0], [72.1, 1201.0], [72.2, 1201.0], [72.3, 1203.0], [72.4, 1206.0], [72.5, 1207.0], [72.6, 1207.0], [72.7, 1209.0], [72.8, 1209.0], [72.9, 1211.0], [73.0, 1214.0], [73.1, 1215.0], [73.2, 1220.0], [73.3, 1224.0], [73.4, 1226.0], [73.5, 1226.0], [73.6, 1227.0], [73.7, 1228.0], [73.8, 1228.0], [73.9, 1229.0], [74.0, 1231.0], [74.1, 1232.0], [74.2, 1232.0], [74.3, 1233.0], [74.4, 1235.0], [74.5, 1235.0], [74.6, 1239.0], [74.7, 1240.0], [74.8, 1240.0], [74.9, 1241.0], [75.0, 1242.0], [75.1, 1242.0], [75.2, 1244.0], [75.3, 1244.0], [75.4, 1245.0], [75.5, 1245.0], [75.6, 1248.0], [75.7, 1250.0], [75.8, 1250.0], [75.9, 1250.0], [76.0, 1251.0], [76.1, 1252.0], [76.2, 1256.0], [76.3, 1258.0], [76.4, 1258.0], [76.5, 1258.0], [76.6, 1259.0], [76.7, 1260.0], [76.8, 1260.0], [76.9, 1260.0], [77.0, 1261.0], [77.1, 1262.0], [77.2, 1262.0], [77.3, 1264.0], [77.4, 1265.0], [77.5, 1265.0], [77.6, 1267.0], [77.7, 1268.0], [77.8, 1269.0], [77.9, 1270.0], [78.0, 1271.0], [78.1, 1272.0], [78.2, 1276.0], [78.3, 1278.0], [78.4, 1280.0], [78.5, 1282.0], [78.6, 1284.0], [78.7, 1284.0], [78.8, 1285.0], [78.9, 1286.0], [79.0, 1286.0], [79.1, 1286.0], [79.2, 1288.0], [79.3, 1289.0], [79.4, 1293.0], [79.5, 1296.0], [79.6, 1299.0], [79.7, 1299.0], [79.8, 1300.0], [79.9, 1305.0], [80.0, 1306.0], [80.1, 1307.0], [80.2, 1309.0], [80.3, 1311.0], [80.4, 1313.0], [80.5, 1314.0], [80.6, 1314.0], [80.7, 1315.0], [80.8, 1318.0], [80.9, 1324.0], [81.0, 1324.0], [81.1, 1326.0], [81.2, 1326.0], [81.3, 1327.0], [81.4, 1330.0], [81.5, 1331.0], [81.6, 1332.0], [81.7, 1333.0], [81.8, 1333.0], [81.9, 1335.0], [82.0, 1336.0], [82.1, 1344.0], [82.2, 1351.0], [82.3, 1354.0], [82.4, 1364.0], [82.5, 1367.0], [82.6, 1371.0], [82.7, 1374.0], [82.8, 1377.0], [82.9, 1377.0], [83.0, 1379.0], [83.1, 1380.0], [83.2, 1382.0], [83.3, 1384.0], [83.4, 1394.0], [83.5, 1394.0], [83.6, 1394.0], [83.7, 1398.0], [83.8, 1399.0], [83.9, 1399.0], [84.0, 1403.0], [84.1, 1404.0], [84.2, 1407.0], [84.3, 1407.0], [84.4, 1409.0], [84.5, 1410.0], [84.6, 1412.0], [84.7, 1413.0], [84.8, 1416.0], [84.9, 1418.0], [85.0, 1419.0], [85.1, 1421.0], [85.2, 1422.0], [85.3, 1423.0], [85.4, 1426.0], [85.5, 1426.0], [85.6, 1427.0], [85.7, 1427.0], [85.8, 1429.0], [85.9, 1440.0], [86.0, 1441.0], [86.1, 1446.0], [86.2, 1449.0], [86.3, 1449.0], [86.4, 1449.0], [86.5, 1452.0], [86.6, 1461.0], [86.7, 1461.0], [86.8, 1470.0], [86.9, 1473.0], [87.0, 1476.0], [87.1, 1479.0], [87.2, 1479.0], [87.3, 1480.0], [87.4, 1480.0], [87.5, 1481.0], [87.6, 1483.0], [87.7, 1485.0], [87.8, 1487.0], [87.9, 1488.0], [88.0, 1489.0], [88.1, 1489.0], [88.2, 1497.0], [88.3, 1497.0], [88.4, 1501.0], [88.5, 1501.0], [88.6, 1514.0], [88.7, 1515.0], [88.8, 1516.0], [88.9, 1518.0], [89.0, 1518.0], [89.1, 1519.0], [89.2, 1523.0], [89.3, 1524.0], [89.4, 1525.0], [89.5, 1540.0], [89.6, 1541.0], [89.7, 1543.0], [89.8, 1545.0], [89.9, 1547.0], [90.0, 1549.0], [90.1, 1551.0], [90.2, 1553.0], [90.3, 1556.0], [90.4, 1558.0], [90.5, 1559.0], [90.6, 1569.0], [90.7, 1571.0], [90.8, 1572.0], [90.9, 1577.0], [91.0, 1578.0], [91.1, 1581.0], [91.2, 1587.0], [91.3, 1593.0], [91.4, 1595.0], [91.5, 1600.0], [91.6, 1600.0], [91.7, 1601.0], [91.8, 1608.0], [91.9, 1613.0], [92.0, 1615.0], [92.1, 1618.0], [92.2, 1619.0], [92.3, 1620.0], [92.4, 1620.0], [92.5, 1624.0], [92.6, 1626.0], [92.7, 1627.0], [92.8, 1628.0], [92.9, 1629.0], [93.0, 1636.0], [93.1, 1641.0], [93.2, 1642.0], [93.3, 1642.0], [93.4, 1651.0], [93.5, 1652.0], [93.6, 1656.0], [93.7, 1661.0], [93.8, 1666.0], [93.9, 1673.0], [94.0, 1674.0], [94.1, 1679.0], [94.2, 1680.0], [94.3, 1688.0], [94.4, 1691.0], [94.5, 1699.0], [94.6, 1699.0], [94.7, 1702.0], [94.8, 1704.0], [94.9, 1705.0], [95.0, 1705.0], [95.1, 1706.0], [95.2, 1713.0], [95.3, 1716.0], [95.4, 1722.0], [95.5, 1723.0], [95.6, 1723.0], [95.7, 1725.0], [95.8, 1727.0], [95.9, 1730.0], [96.0, 1745.0], [96.1, 1754.0], [96.2, 1762.0], [96.3, 1765.0], [96.4, 1769.0], [96.5, 1773.0], [96.6, 1789.0], [96.7, 1793.0], [96.8, 1802.0], [96.9, 1813.0], [97.0, 1835.0], [97.1, 1897.0], [97.2, 1908.0], [97.3, 1916.0], [97.4, 1927.0], [97.5, 1931.0], [97.6, 1939.0], [97.7, 1944.0], [97.8, 1954.0], [97.9, 1957.0], [98.0, 1958.0], [98.1, 1963.0], [98.2, 1977.0], [98.3, 1979.0], [98.4, 1979.0], [98.5, 1981.0], [98.6, 1998.0], [98.7, 2008.0], [98.8, 2050.0], [98.9, 2093.0], [99.0, 2136.0], [99.1, 2171.0], [99.2, 2187.0], [99.3, 2189.0], [99.4, 2200.0], [99.5, 2239.0], [99.6, 2375.0], [99.7, 2382.0], [99.8, 2718.0], [99.9, 2749.0]], "isOverall": false, "label": "Actuator-Info", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 124.0, "series": [{"data": [[2100.0, 3.0], [0.0, 5.0], [600.0, 77.0], [2400.0, 1.0], [700.0, 82.0], [800.0, 99.0], [200.0, 22.0], [900.0, 114.0], [1000.0, 84.0], [1100.0, 62.0], [1200.0, 73.0], [300.0, 18.0], [1300.0, 53.0], [1400.0, 36.0], [1500.0, 20.0], [1600.0, 32.0], [400.0, 26.0], [100.0, 27.0], [1700.0, 30.0], [1800.0, 53.0], [1900.0, 10.0], [2000.0, 9.0], [500.0, 64.0]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[2100.0, 4.0], [2200.0, 2.0], [2300.0, 2.0], [600.0, 64.0], [700.0, 80.0], [2700.0, 2.0], [800.0, 102.0], [200.0, 8.0], [900.0, 106.0], [1000.0, 118.0], [1100.0, 124.0], [300.0, 33.0], [1200.0, 80.0], [1300.0, 42.0], [1400.0, 44.0], [1500.0, 31.0], [400.0, 40.0], [1600.0, 32.0], [1700.0, 21.0], [1800.0, 4.0], [1900.0, 15.0], [500.0, 43.0], [2000.0, 3.0]], "isOverall": false, "label": "Actuator-Info", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 180.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1546.0, "series": [{"data": [[0.0, 180.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1546.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 274.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 351.94999999999993, "minX": 1.68062094E12, "maxY": 351.94999999999993, "series": [{"data": [[1.68062094E12, 351.94999999999993]], "isOverall": false, "label": "Actuator", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062094E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.0, "maxY": 2239.0, "series": [{"data": [[2.0, 81.0], [3.0, 90.0], [4.0, 96.0], [5.0, 102.0], [6.0, 104.0], [7.0, 103.0], [8.0, 101.0], [9.0, 108.0], [10.0, 130.0], [11.0, 136.0], [12.0, 145.0], [13.0, 154.0], [14.0, 74.0], [15.0, 155.0], [16.0, 155.0], [17.0, 564.0], [18.0, 532.0], [19.0, 561.0], [20.0, 564.0], [21.0, 565.0], [22.0, 544.0], [23.0, 146.0], [24.0, 540.0], [25.0, 568.0], [26.0, 526.0], [27.0, 524.0], [28.0, 570.0], [29.0, 523.0], [30.0, 571.0], [31.0, 146.0], [33.0, 178.0], [32.0, 144.0], [35.0, 176.0], [34.0, 170.0], [37.0, 256.0], [36.0, 160.0], [39.0, 186.0], [38.0, 178.0], [41.0, 200.0], [40.0, 198.0], [43.0, 214.0], [42.0, 214.0], [45.0, 254.0], [44.0, 217.0], [47.0, 280.0], [46.0, 278.0], [49.0, 281.0], [48.0, 281.0], [51.0, 286.0], [50.0, 283.0], [53.0, 295.0], [52.0, 286.0], [55.0, 323.0], [54.0, 314.0], [57.0, 1250.0], [56.0, 330.0], [59.0, 556.5], [61.0, 561.0], [60.0, 560.0], [63.0, 559.0], [62.0, 559.0], [67.0, 547.0], [66.0, 1229.0], [65.0, 554.0], [64.0, 556.0], [71.0, 570.0], [70.0, 568.0], [69.0, 1218.0], [68.0, 1221.0], [75.0, 1181.0], [74.0, 585.0], [73.0, 585.0], [72.0, 570.0], [79.0, 593.0], [78.0, 583.0], [77.0, 582.0], [76.0, 584.0], [83.0, 542.0], [82.0, 601.0], [81.0, 600.0], [80.0, 603.0], [87.0, 629.0], [86.0, 627.0], [85.0, 632.0], [84.0, 629.0], [91.0, 1126.0], [90.0, 657.0], [89.0, 655.0], [88.0, 654.0], [95.0, 667.0], [94.0, 660.0], [93.0, 656.0], [92.0, 661.0], [99.0, 686.0], [98.0, 671.0], [97.0, 674.0], [96.0, 671.0], [103.0, 685.0], [102.0, 684.0], [101.0, 1091.0], [100.0, 686.0], [107.0, 688.0], [106.0, 687.0], [105.0, 689.0], [104.0, 683.0], [111.0, 715.0], [110.0, 711.0], [109.0, 714.0], [108.0, 711.0], [115.0, 751.0], [114.0, 749.0], [113.0, 715.0], [112.0, 713.0], [119.0, 758.0], [118.0, 1038.0], [117.0, 753.0], [116.0, 752.0], [123.0, 800.0], [122.0, 763.0], [121.0, 763.0], [120.0, 772.0], [127.0, 983.0], [126.0, 819.0], [125.0, 819.0], [124.0, 806.0], [135.0, 873.0], [134.0, 971.0], [133.0, 827.0], [132.0, 828.0], [131.0, 871.0], [130.0, 873.0], [129.0, 834.0], [128.0, 804.0], [143.0, 889.0], [142.0, 941.0], [141.0, 889.0], [140.0, 883.0], [139.0, 887.0], [138.0, 885.0], [137.0, 802.0], [136.0, 883.0], [151.0, 1072.0], [150.0, 1213.0], [149.0, 1031.0], [148.0, 800.0], [147.0, 803.0], [146.0, 802.0], [145.0, 802.0], [144.0, 805.0], [159.0, 903.0], [158.0, 936.0], [157.0, 928.0], [156.0, 1223.0], [155.0, 933.0], [154.0, 928.0], [153.0, 1004.0], [152.0, 1003.0], [167.0, 975.0], [166.0, 1198.0], [165.0, 994.0], [164.0, 1024.0], [163.0, 988.0], [162.0, 873.0], [161.0, 898.0], [160.0, 903.0], [175.0, 1036.0], [174.0, 1039.0], [173.0, 1038.0], [172.0, 996.0], [171.0, 1035.0], [170.0, 1180.0], [169.0, 895.0], [168.0, 1048.0], [183.0, 854.6666666666666], [180.0, 775.0], [179.0, 1027.0], [178.0, 1005.0], [177.0, 755.0], [176.0, 1031.0], [191.0, 1200.0], [190.0, 1129.0], [189.0, 671.0], [188.0, 812.0], [187.0, 758.0], [186.0, 1031.0], [185.0, 824.0], [184.0, 1030.0], [199.0, 780.0], [198.0, 1107.5], [196.0, 794.0], [195.0, 800.0], [194.0, 1152.0], [193.0, 812.0], [192.0, 1157.0], [207.0, 1131.0], [206.0, 756.0], [205.0, 990.0], [204.0, 628.0], [203.0, 1147.0], [202.0, 996.0], [201.0, 1151.0], [200.0, 1153.0], [215.0, 1129.0], [214.0, 1132.0], [213.0, 1133.0], [212.0, 1117.0], [211.0, 702.0], [210.0, 1084.0], [209.0, 1134.0], [208.0, 738.0], [223.0, 712.0], [222.0, 607.0], [221.0, 1126.0], [220.0, 946.0], [219.0, 1071.0], [218.0, 1128.0], [217.0, 953.0], [216.0, 1129.0], [231.0, 1104.0], [230.0, 1107.0], [229.0, 1106.0], [228.0, 1109.0], [227.0, 1108.0], [226.0, 1113.0], [225.0, 559.0], [224.0, 930.0], [239.0, 6.0], [238.0, 1094.0], [237.0, 1097.0], [236.0, 1011.0], [235.0, 1099.0], [234.0, 1100.0], [233.0, 1102.0], [232.0, 935.0], [247.0, 1068.0], [246.0, 645.0], [245.0, 644.0], [244.0, 1077.0], [243.0, 1076.0], [242.0, 510.0], [241.0, 653.0], [240.0, 657.0], [255.0, 615.0], [254.0, 1094.0], [253.0, 628.0], [252.0, 624.0], [251.0, 458.0], [250.0, 1060.0], [249.0, 633.0], [248.0, 633.0], [270.0, 1057.0], [271.0, 779.0], [269.0, 387.0], [268.0, 1061.0], [267.0, 780.0], [266.0, 1072.0], [265.0, 592.0], [264.0, 1014.0], [263.0, 790.0], [257.0, 607.0], [256.0, 1084.0], [259.0, 1068.0], [258.0, 1069.0], [262.0, 792.0], [261.0, 587.0], [260.0, 443.0], [286.0, 1037.0], [287.0, 517.0], [285.0, 1041.0], [284.0, 533.0], [283.0, 727.0], [282.0, 1032.0], [281.0, 1050.0], [280.0, 1037.0], [279.0, 377.0], [273.0, 975.0], [272.0, 1056.0], [275.0, 555.0], [274.0, 554.0], [278.0, 823.0], [277.0, 1047.0], [276.0, 862.0], [302.0, 307.0], [303.0, 308.0], [301.0, 495.0], [300.0, 1023.0], [299.0, 679.0], [297.0, 1022.0], [296.0, 1030.0], [295.0, 766.5], [289.0, 1034.0], [288.0, 824.0], [291.0, 513.0], [290.0, 511.0], [293.0, 505.0], [292.0, 332.0], [318.0, 732.0], [319.0, 458.0], [317.0, 989.0], [316.0, 463.0], [315.0, 992.0], [314.0, 265.0], [313.0, 469.0], [312.0, 469.0], [311.0, 762.0], [305.0, 768.5], [304.0, 781.0], [307.0, 1035.0], [306.0, 1028.0], [310.0, 263.0], [309.0, 503.0], [308.0, 487.0], [334.0, 961.0], [335.0, 978.0], [333.0, 991.0], [332.0, 1022.0], [331.0, 974.0], [330.0, 421.0], [329.0, 971.0], [328.0, 974.0], [327.0, 973.0], [321.0, 239.0], [320.0, 991.0], [323.0, 603.0], [322.0, 444.0], [326.0, 431.0], [325.0, 983.0], [324.0, 981.0], [350.0, 568.5], [351.0, 757.0], [349.0, 374.0], [348.0, 925.0], [347.0, 926.0], [346.0, 927.0], [345.0, 403.0], [344.0, 554.0], [343.0, 983.0], [337.0, 567.0], [336.0, 418.0], [339.0, 1010.0], [338.0, 673.0], [342.0, 432.0], [341.0, 555.0], [340.0, 412.0], [366.0, 1348.0], [367.0, 492.5], [364.0, 662.6666666666666], [355.0, 624.0], [365.0, 328.0], [354.0, 1275.5], [353.0, 833.75], [352.0, 471.0], [363.0, 426.25], [362.0, 1291.5], [361.0, 466.5], [360.0, 682.75], [359.0, 626.75], [358.0, 792.0], [357.0, 1030.0], [356.0, 770.5], [382.0, 680.0], [383.0, 805.75], [380.0, 850.0], [371.0, 1194.0], [381.0, 784.75], [378.0, 965.8333333333333], [377.0, 878.0], [379.0, 810.7777777777778], [376.0, 882.7142857142857], [373.0, 983.2], [372.0, 898.375], [375.0, 1029.6666666666665], [374.0, 908.0], [370.0, 856.75], [369.0, 974.0], [368.0, 557.5], [398.0, 1405.0], [399.0, 787.5], [397.0, 960.3333333333334], [396.0, 838.1666666666666], [395.0, 1238.6666666666667], [394.0, 901.0], [393.0, 1065.3333333333333], [392.0, 907.0], [391.0, 1059.6], [388.0, 916.25], [390.0, 819.0], [389.0, 979.0], [387.0, 833.6], [386.0, 1208.0], [385.0, 1084.6666666666667], [384.0, 798.0], [414.0, 810.0], [415.0, 1106.3333333333333], [413.0, 899.5], [412.0, 835.0], [411.0, 852.0], [410.0, 907.3333333333334], [408.0, 837.0], [409.0, 826.0], [406.0, 1306.2], [403.0, 1177.25], [402.0, 1196.0], [401.0, 1239.4285714285713], [400.0, 1187.142857142857], [407.0, 991.0], [404.0, 1225.3333333333333], [405.0, 812.0], [430.0, 1354.0], [431.0, 1371.0], [429.0, 1337.0], [428.0, 997.5], [427.0, 1463.6666666666667], [426.0, 1371.0], [425.0, 1392.5], [424.0, 713.5], [423.0, 1051.0], [417.0, 1200.0], [416.0, 847.2], [419.0, 1495.3333333333333], [418.0, 1111.3333333333333], [422.0, 766.0], [421.0, 1314.0], [420.0, 747.0], [446.0, 1401.6666666666665], [447.0, 1260.0], [445.0, 1535.4], [444.0, 1005.1428571428572], [443.0, 1317.75], [442.0, 929.6666666666666], [441.0, 1237.6666666666667], [440.0, 1145.5000000000002], [439.0, 1710.0], [433.0, 1586.0], [432.0, 1415.5], [434.0, 1123.6666666666667], [435.0, 1396.25], [437.0, 1195.9999999999998], [436.0, 1236.6666666666667], [438.0, 1091.5], [462.0, 1275.2], [463.0, 1347.6666666666667], [461.0, 1621.5], [460.0, 1535.8181818181818], [459.0, 1534.8], [458.0, 1415.2142857142858], [457.0, 1682.8181818181818], [456.0, 1610.7857142857142], [454.0, 1524.888888888889], [453.0, 1526.6000000000001], [452.0, 1372.5], [455.0, 1714.8], [449.0, 1236.2000000000003], [448.0, 1145.5], [451.0, 1370.0], [450.0, 1738.125], [467.0, 1476.2], [477.0, 1408.0], [476.0, 1411.0], [475.0, 1366.0], [474.0, 1385.0], [472.0, 1329.0], [471.0, 1373.5], [470.0, 1635.1666666666667], [468.0, 1473.9047619047617], [469.0, 1484.0], [466.0, 1452.5], [465.0, 1200.2], [464.0, 1002.4], [494.0, 1165.0], [495.0, 1262.5], [492.0, 1348.5], [483.0, 1361.5], [482.0, 1397.3333333333333], [480.0, 1388.0], [491.0, 1369.0], [489.0, 1341.0], [488.0, 1301.5], [486.0, 1339.0], [485.0, 1290.0], [484.0, 1372.0], [499.0, 1265.5], [510.0, 1216.0], [511.0, 1312.0], [509.0, 1306.0], [507.0, 1312.5], [505.0, 1254.5], [503.0, 1252.0], [501.0, 1275.5], [500.0, 1299.0], [498.0, 1255.0], [497.0, 1215.0], [496.0, 1156.5], [528.0, 1093.0], [531.0, 1187.0], [530.0, 1189.6666666666667], [529.0, 1170.0], [526.0, 1044.0], [513.0, 1220.0], [512.0, 1222.0], [525.0, 1221.0], [524.0, 1121.0], [523.0, 1221.0], [521.0, 1144.5], [520.0, 1196.4285714285716], [515.0, 1163.5], [514.0, 1130.0], [1.0, 210.0]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[341.4979999999997, 1022.6359999999996]], "isOverall": false, "label": "Actuator-health-Aggregated", "isController": false}, {"data": [[30.0, 1656.0], [35.0, 1642.0], [37.0, 1620.0], [36.0, 1646.0], [39.0, 1617.75], [45.0, 1601.0], [48.0, 1549.0], [53.0, 1516.0], [55.0, 1571.0], [57.0, 1636.0], [56.0, 1552.0], [66.0, 1562.5], [73.0, 1965.5], [72.0, 1984.5], [83.0, 1524.0], [80.0, 1558.0], [89.0, 1508.0], [95.0, 1470.0], [99.0, 1429.0], [97.0, 1423.0], [96.0, 1514.0], [113.0, 2239.0], [122.0, 1539.4], [121.0, 1377.0], [120.0, 1364.0], [126.0, 2171.0], [134.0, 1293.0], [141.0, 1260.0], [137.0, 1324.0], [166.0, 1581.0], [175.0, 1427.0], [174.0, 1255.8333333333335], [173.0, 1257.0], [172.0, 1720.0], [170.0, 1485.0], [169.0, 1642.0], [183.0, 1318.0], [187.0, 1200.5], [198.0, 1346.25], [196.0, 1200.0], [193.0, 1186.0], [205.0, 1064.0], [201.0, 1473.0], [222.0, 1267.0], [221.0, 1029.0], [220.0, 1306.0], [239.0, 1011.0], [238.0, 1021.0], [237.0, 1114.0], [236.0, 1335.0], [232.0, 1199.5], [247.0, 1147.0], [246.0, 1183.0], [244.0, 1193.0], [240.0, 1051.5], [254.0, 1047.0], [253.0, 1209.0], [269.0, 1080.3333333333333], [267.0, 1097.0], [256.0, 909.3333333333334], [278.0, 984.25], [279.0, 981.8571428571428], [280.0, 944.6666666666666], [281.0, 871.8], [283.0, 1077.0], [284.0, 1030.4545454545453], [285.0, 1044.0], [286.0, 804.8571428571429], [287.0, 991.875], [289.0, 760.2], [288.0, 962.7], [290.0, 921.4444444444445], [291.0, 959.4285714285714], [292.0, 938.1428571428571], [293.0, 985.8], [294.0, 946.4615384615385], [295.0, 908.6], [296.0, 908.3333333333334], [303.0, 808.5], [300.0, 779.8888888888889], [302.0, 570.6666666666666], [297.0, 892.5454545454545], [298.0, 813.7777777777778], [299.0, 680.0], [305.0, 689.8], [304.0, 717.0], [306.0, 494.6666666666667], [307.0, 622.0], [308.0, 522.0], [309.0, 875.0], [310.0, 623.0000000000001], [311.0, 411.25], [313.0, 283.0], [318.0, 391.0], [319.0, 496.5], [316.0, 212.0], [317.0, 367.0], [321.0, 357.25], [320.0, 410.0], [322.0, 390.5], [323.0, 552.3333333333334], [324.0, 347.0], [325.0, 609.5], [326.0, 599.0], [328.0, 415.0], [334.0, 639.5], [332.0, 867.0], [335.0, 896.0], [337.0, 694.8], [338.0, 417.0], [340.0, 448.6666666666667], [342.0, 399.0], [347.0, 473.0], [348.0, 660.0], [350.0, 730.6666666666667], [345.0, 873.8], [354.0, 957.3333333333334], [356.0, 547.0], [357.0, 1114.6666666666667], [362.0, 669.3333333333334], [363.0, 579.0], [367.0, 1006.2222222222222], [366.0, 1046.0], [358.0, 1257.25], [359.0, 987.6666666666666], [353.0, 956.0], [352.0, 627.0], [381.0, 1261.0], [369.0, 1225.8], [370.0, 1422.0], [368.0, 1328.75], [375.0, 860.5], [374.0, 1074.8461538461538], [373.0, 1218.111111111111], [372.0, 1348.142857142857], [382.0, 1129.0], [380.0, 959.5], [371.0, 1245.75], [379.0, 993.9999999999999], [378.0, 1089.3333333333333], [377.0, 1128.0], [376.0, 646.0], [396.0, 1200.375], [384.0, 661.25], [387.0, 978.0], [385.0, 933.3333333333334], [386.0, 939.0], [389.0, 378.6666666666667], [388.0, 1193.2499999999998], [390.0, 424.0], [391.0, 639.75], [395.0, 1031.8333333333333], [394.0, 1183.0], [393.0, 1200.5], [392.0, 1084.5], [397.0, 1110.3076923076922], [398.0, 1108.4], [399.0, 1236.8461538461538], [403.0, 1118.3333333333333], [400.0, 1152.8749999999998], [401.0, 1006.6666666666666], [402.0, 1144.0], [407.0, 488.0], [404.0, 1283.142857142857], [405.0, 941.5], [408.0, 796.8], [410.0, 898.0], [411.0, 1679.0], [409.0, 1705.0], [412.0, 655.6666666666666], [415.0, 897.6], [414.0, 1060.8], [413.0, 745.8], [430.0, 818.3333333333334], [416.0, 923.4], [425.0, 629.0], [431.0, 658.0], [427.0, 2136.0], [423.0, 2189.0], [419.0, 977.4705882352943], [417.0, 807.0], [418.0, 966.3333333333334], [420.0, 1131.0], [421.0, 946.0], [445.0, 1104.4], [446.0, 1170.888888888889], [444.0, 728.0], [443.0, 860.0], [442.0, 1378.7777777777778], [441.0, 1026.0], [439.0, 1559.0], [440.0, 1001.5], [447.0, 1213.6666666666665], [438.0, 1377.6666666666667], [437.0, 1272.4], [436.0, 1654.6666666666667], [434.0, 951.3333333333333], [432.0, 1546.0], [433.0, 1181.0], [435.0, 1053.3333333333333], [462.0, 795.0], [459.0, 1115.25], [460.0, 1063.764705882353], [463.0, 1055.5], [456.0, 1118.5294117647059], [461.0, 1054.25], [458.0, 926.8571428571429], [457.0, 1224.7333333333333], [454.0, 1132.9999999999998], [453.0, 1224.1666666666665], [452.0, 1046.5], [455.0, 1293.3333333333333], [448.0, 1170.0], [449.0, 1026.0], [450.0, 965.375], [451.0, 1115.2857142857142], [465.0, 987.5999999999999], [466.0, 951.6666666666666], [469.0, 921.5], [472.0, 851.0], [477.0, 956.0], [471.0, 1047.0], [470.0, 1318.5], [468.0, 939.0344827586207], [467.0, 764.25], [464.0, 1133.0], [485.0, 996.0], [486.0, 1022.0], [487.0, 1075.0], [496.0, 1029.0], [497.0, 1068.0], [498.0, 1038.0], [499.0, 924.0], [503.0, 1117.0], [529.0, 1178.0], [522.0, 1229.0], [520.0, 757.5], [513.0, 783.0], [512.0, 457.5]], "isOverall": false, "label": "Actuator-Info", "isController": false}, {"data": [[362.40099999999995, 1034.5400000000004]], "isOverall": false, "label": "Actuator-Info-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 531.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5666.666666666667, "minX": 1.68062094E12, "maxY": 6950.0, "series": [{"data": [[1.68062094E12, 6950.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68062094E12, 5666.666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062094E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1022.6359999999996, "minX": 1.68062094E12, "maxY": 1034.5400000000004, "series": [{"data": [[1.68062094E12, 1022.6359999999996]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[1.68062094E12, 1034.5400000000004]], "isOverall": false, "label": "Actuator-Info", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062094E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 988.1179999999997, "minX": 1.68062094E12, "maxY": 1016.8390000000002, "series": [{"data": [[1.68062094E12, 988.1179999999997]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[1.68062094E12, 1016.8390000000002]], "isOverall": false, "label": "Actuator-Info", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062094E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68062094E12, "maxY": 72.17600000000003, "series": [{"data": [[1.68062094E12, 0.0]], "isOverall": false, "label": "Actuator-health", "isController": false}, {"data": [[1.68062094E12, 72.17600000000003]], "isOverall": false, "label": "Actuator-Info", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062094E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.68062094E12, "maxY": 2749.0, "series": [{"data": [[1.68062094E12, 2749.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68062094E12, 1627.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68062094E12, 2066.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68062094E12, 1822.9499999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68062094E12, 6.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68062094E12, 996.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062094E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 714.0, "minX": 207.0, "maxY": 1233.0, "series": [{"data": [[289.0, 860.0], [372.0, 993.5], [385.0, 958.0], [207.0, 714.0], [492.0, 1157.0], [255.0, 1233.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 492.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 714.0, "minX": 207.0, "maxY": 1221.0, "series": [{"data": [[289.0, 856.0], [372.0, 991.0], [385.0, 936.0], [207.0, 714.0], [492.0, 1137.5], [255.0, 1221.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 492.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.68062094E12, "maxY": 33.333333333333336, "series": [{"data": [[1.68062094E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062094E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.68062094E12, "maxY": 33.333333333333336, "series": [{"data": [[1.68062094E12, 33.333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062094E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.68062094E12, "maxY": 16.666666666666668, "series": [{"data": [[1.68062094E12, 16.666666666666668]], "isOverall": false, "label": "Actuator-health-success", "isController": false}, {"data": [[1.68062094E12, 16.666666666666668]], "isOverall": false, "label": "Actuator-Info-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062094E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.68062094E12, "maxY": 33.333333333333336, "series": [{"data": [[1.68062094E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062094E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

