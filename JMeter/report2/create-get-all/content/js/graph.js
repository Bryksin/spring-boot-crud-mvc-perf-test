/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 115.0, "minX": 0.0, "maxY": 8395.0, "series": [{"data": [[0.0, 115.0], [0.1, 123.0], [0.2, 132.0], [0.3, 132.0], [0.4, 135.0], [0.5, 136.0], [0.6, 137.0], [0.7, 141.0], [0.8, 153.0], [0.9, 154.0], [1.0, 157.0], [1.1, 157.0], [1.2, 163.0], [1.3, 171.0], [1.4, 171.0], [1.5, 175.0], [1.6, 180.0], [1.7, 191.0], [1.8, 197.0], [1.9, 201.0], [2.0, 202.0], [2.1, 202.0], [2.2, 212.0], [2.3, 222.0], [2.4, 224.0], [2.5, 226.0], [2.6, 233.0], [2.7, 233.0], [2.8, 240.0], [2.9, 248.0], [3.0, 274.0], [3.1, 274.0], [3.2, 286.0], [3.3, 289.0], [3.4, 290.0], [3.5, 292.0], [3.6, 295.0], [3.7, 298.0], [3.8, 303.0], [3.9, 303.0], [4.0, 305.0], [4.1, 308.0], [4.2, 320.0], [4.3, 335.0], [4.4, 339.0], [4.5, 340.0], [4.6, 342.0], [4.7, 345.0], [4.8, 350.0], [4.9, 350.0], [5.0, 380.0], [5.1, 389.0], [5.2, 389.0], [5.3, 391.0], [5.4, 393.0], [5.5, 395.0], [5.6, 395.0], [5.7, 396.0], [5.8, 401.0], [5.9, 564.0], [6.0, 649.0], [6.1, 687.0], [6.2, 705.0], [6.3, 952.0], [6.4, 952.0], [6.5, 956.0], [6.6, 981.0], [6.7, 1060.0], [6.8, 1100.0], [6.9, 1148.0], [7.0, 1194.0], [7.1, 1243.0], [7.2, 1245.0], [7.3, 1246.0], [7.4, 1247.0], [7.5, 1253.0], [7.6, 1256.0], [7.7, 1265.0], [7.8, 1274.0], [7.9, 1274.0], [8.0, 1276.0], [8.1, 1276.0], [8.2, 1280.0], [8.3, 1281.0], [8.4, 1281.0], [8.5, 1282.0], [8.6, 1284.0], [8.7, 1286.0], [8.8, 1286.0], [8.9, 1289.0], [9.0, 1289.0], [9.1, 1289.0], [9.2, 1290.0], [9.3, 1291.0], [9.4, 1302.0], [9.5, 1303.0], [9.6, 1303.0], [9.7, 1305.0], [9.8, 1311.0], [9.9, 1312.0], [10.0, 1312.0], [10.1, 1313.0], [10.2, 1314.0], [10.3, 1319.0], [10.4, 1319.0], [10.5, 1320.0], [10.6, 1322.0], [10.7, 1323.0], [10.8, 1324.0], [10.9, 1324.0], [11.0, 1325.0], [11.1, 1325.0], [11.2, 1325.0], [11.3, 1325.0], [11.4, 1327.0], [11.5, 1329.0], [11.6, 1331.0], [11.7, 1331.0], [11.8, 1331.0], [11.9, 1332.0], [12.0, 1332.0], [12.1, 1332.0], [12.2, 1333.0], [12.3, 1333.0], [12.4, 1333.0], [12.5, 1333.0], [12.6, 1334.0], [12.7, 1334.0], [12.8, 1335.0], [12.9, 1335.0], [13.0, 1335.0], [13.1, 1336.0], [13.2, 1337.0], [13.3, 1337.0], [13.4, 1338.0], [13.5, 1338.0], [13.6, 1338.0], [13.7, 1338.0], [13.8, 1339.0], [13.9, 1339.0], [14.0, 1339.0], [14.1, 1340.0], [14.2, 1340.0], [14.3, 1340.0], [14.4, 1341.0], [14.5, 1341.0], [14.6, 1341.0], [14.7, 1342.0], [14.8, 1342.0], [14.9, 1342.0], [15.0, 1342.0], [15.1, 1342.0], [15.2, 1342.0], [15.3, 1343.0], [15.4, 1343.0], [15.5, 1343.0], [15.6, 1343.0], [15.7, 1344.0], [15.8, 1344.0], [15.9, 1344.0], [16.0, 1344.0], [16.1, 1344.0], [16.2, 1344.0], [16.3, 1344.0], [16.4, 1344.0], [16.5, 1344.0], [16.6, 1344.0], [16.7, 1344.0], [16.8, 1345.0], [16.9, 1345.0], [17.0, 1345.0], [17.1, 1345.0], [17.2, 1345.0], [17.3, 1346.0], [17.4, 1346.0], [17.5, 1346.0], [17.6, 1346.0], [17.7, 1346.0], [17.8, 1346.0], [17.9, 1346.0], [18.0, 1347.0], [18.1, 1347.0], [18.2, 1347.0], [18.3, 1347.0], [18.4, 1347.0], [18.5, 1347.0], [18.6, 1347.0], [18.7, 1348.0], [18.8, 1348.0], [18.9, 1348.0], [19.0, 1348.0], [19.1, 1348.0], [19.2, 1348.0], [19.3, 1348.0], [19.4, 1348.0], [19.5, 1348.0], [19.6, 1349.0], [19.7, 1349.0], [19.8, 1349.0], [19.9, 1349.0], [20.0, 1349.0], [20.1, 1349.0], [20.2, 1350.0], [20.3, 1350.0], [20.4, 1350.0], [20.5, 1350.0], [20.6, 1350.0], [20.7, 1351.0], [20.8, 1351.0], [20.9, 1352.0], [21.0, 1352.0], [21.1, 1353.0], [21.2, 1353.0], [21.3, 1354.0], [21.4, 1354.0], [21.5, 1355.0], [21.6, 1355.0], [21.7, 1355.0], [21.8, 1355.0], [21.9, 1356.0], [22.0, 1356.0], [22.1, 1356.0], [22.2, 1356.0], [22.3, 1357.0], [22.4, 1357.0], [22.5, 1357.0], [22.6, 1358.0], [22.7, 1358.0], [22.8, 1358.0], [22.9, 1358.0], [23.0, 1359.0], [23.1, 1359.0], [23.2, 1362.0], [23.3, 1362.0], [23.4, 1362.0], [23.5, 1363.0], [23.6, 1363.0], [23.7, 1364.0], [23.8, 1366.0], [23.9, 1367.0], [24.0, 1368.0], [24.1, 1369.0], [24.2, 1369.0], [24.3, 1370.0], [24.4, 1370.0], [24.5, 1371.0], [24.6, 1372.0], [24.7, 1373.0], [24.8, 1373.0], [24.9, 1373.0], [25.0, 1374.0], [25.1, 1375.0], [25.2, 1375.0], [25.3, 1376.0], [25.4, 1377.0], [25.5, 1377.0], [25.6, 1380.0], [25.7, 1380.0], [25.8, 1380.0], [25.9, 1381.0], [26.0, 1381.0], [26.1, 1381.0], [26.2, 1383.0], [26.3, 1384.0], [26.4, 1384.0], [26.5, 1385.0], [26.6, 1386.0], [26.7, 1387.0], [26.8, 1389.0], [26.9, 1390.0], [27.0, 1390.0], [27.1, 1391.0], [27.2, 1392.0], [27.3, 1393.0], [27.4, 1393.0], [27.5, 1394.0], [27.6, 1394.0], [27.7, 1394.0], [27.8, 1395.0], [27.9, 1395.0], [28.0, 1396.0], [28.1, 1398.0], [28.2, 1398.0], [28.3, 1399.0], [28.4, 1399.0], [28.5, 1400.0], [28.6, 1400.0], [28.7, 1401.0], [28.8, 1401.0], [28.9, 1402.0], [29.0, 1403.0], [29.1, 1403.0], [29.2, 1409.0], [29.3, 1409.0], [29.4, 1411.0], [29.5, 1416.0], [29.6, 1422.0], [29.7, 1423.0], [29.8, 1424.0], [29.9, 1424.0], [30.0, 1425.0], [30.1, 1426.0], [30.2, 1426.0], [30.3, 1443.0], [30.4, 1444.0], [30.5, 1448.0], [30.6, 1495.0], [30.7, 1497.0], [30.8, 1516.0], [30.9, 1526.0], [31.0, 1526.0], [31.1, 1537.0], [31.2, 1547.0], [31.3, 1562.0], [31.4, 1575.0], [31.5, 1576.0], [31.6, 1590.0], [31.7, 1626.0], [31.8, 1635.0], [31.9, 1642.0], [32.0, 1646.0], [32.1, 1671.0], [32.2, 1672.0], [32.3, 1679.0], [32.4, 1693.0], [32.5, 1704.0], [32.6, 1714.0], [32.7, 1717.0], [32.8, 1724.0], [32.9, 1747.0], [33.0, 1756.0], [33.1, 1774.0], [33.2, 1776.0], [33.3, 1776.0], [33.4, 1801.0], [33.5, 1802.0], [33.6, 1813.0], [33.7, 1829.0], [33.8, 1855.0], [33.9, 1867.0], [34.0, 1894.0], [34.1, 1900.0], [34.2, 1912.0], [34.3, 1917.0], [34.4, 1920.0], [34.5, 1930.0], [34.6, 1939.0], [34.7, 1944.0], [34.8, 1947.0], [34.9, 1960.0], [35.0, 1965.0], [35.1, 1968.0], [35.2, 1973.0], [35.3, 1974.0], [35.4, 1976.0], [35.5, 2018.0], [35.6, 2025.0], [35.7, 2029.0], [35.8, 2035.0], [35.9, 2052.0], [36.0, 2056.0], [36.1, 2066.0], [36.2, 2077.0], [36.3, 2097.0], [36.4, 2112.0], [36.5, 2113.0], [36.6, 2135.0], [36.7, 2135.0], [36.8, 2155.0], [36.9, 2168.0], [37.0, 2172.0], [37.1, 2187.0], [37.2, 2189.0], [37.3, 2191.0], [37.4, 2194.0], [37.5, 2199.0], [37.6, 2222.0], [37.7, 2223.0], [37.8, 2223.0], [37.9, 2250.0], [38.0, 2259.0], [38.1, 2259.0], [38.2, 2265.0], [38.3, 2266.0], [38.4, 2280.0], [38.5, 2299.0], [38.6, 2301.0], [38.7, 2302.0], [38.8, 2313.0], [38.9, 2319.0], [39.0, 2321.0], [39.1, 2366.0], [39.2, 2377.0], [39.3, 2390.0], [39.4, 2397.0], [39.5, 2402.0], [39.6, 2406.0], [39.7, 2409.0], [39.8, 2417.0], [39.9, 2417.0], [40.0, 2422.0], [40.1, 2422.0], [40.2, 2430.0], [40.3, 2441.0], [40.4, 2447.0], [40.5, 2460.0], [40.6, 2519.0], [40.7, 2545.0], [40.8, 2568.0], [40.9, 2583.0], [41.0, 2587.0], [41.1, 2604.0], [41.2, 2641.0], [41.3, 2644.0], [41.4, 2646.0], [41.5, 2647.0], [41.6, 2647.0], [41.7, 2649.0], [41.8, 2652.0], [41.9, 2660.0], [42.0, 2662.0], [42.1, 2667.0], [42.2, 2668.0], [42.3, 2676.0], [42.4, 2688.0], [42.5, 2689.0], [42.6, 2690.0], [42.7, 2692.0], [42.8, 2696.0], [42.9, 2697.0], [43.0, 2718.0], [43.1, 2719.0], [43.2, 2720.0], [43.3, 2726.0], [43.4, 2727.0], [43.5, 2734.0], [43.6, 2764.0], [43.7, 2767.0], [43.8, 2771.0], [43.9, 2790.0], [44.0, 2797.0], [44.1, 2822.0], [44.2, 2839.0], [44.3, 2862.0], [44.4, 2907.0], [44.5, 2945.0], [44.6, 2973.0], [44.7, 3011.0], [44.8, 3032.0], [44.9, 3145.0], [45.0, 3154.0], [45.1, 3161.0], [45.2, 3168.0], [45.3, 3188.0], [45.4, 3196.0], [45.5, 3225.0], [45.6, 3238.0], [45.7, 3239.0], [45.8, 3302.0], [45.9, 3326.0], [46.0, 3383.0], [46.1, 3526.0], [46.2, 3553.0], [46.3, 3554.0], [46.4, 3563.0], [46.5, 3591.0], [46.6, 3593.0], [46.7, 3625.0], [46.8, 3642.0], [46.9, 3662.0], [47.0, 3741.0], [47.1, 3743.0], [47.2, 3747.0], [47.3, 3777.0], [47.4, 3804.0], [47.5, 3809.0], [47.6, 3818.0], [47.7, 3826.0], [47.8, 3851.0], [47.9, 3853.0], [48.0, 3853.0], [48.1, 3859.0], [48.2, 3862.0], [48.3, 3868.0], [48.4, 3878.0], [48.5, 3882.0], [48.6, 3888.0], [48.7, 3889.0], [48.8, 3894.0], [48.9, 3904.0], [49.0, 3904.0], [49.1, 3926.0], [49.2, 3931.0], [49.3, 3932.0], [49.4, 3939.0], [49.5, 3939.0], [49.6, 3940.0], [49.7, 3940.0], [49.8, 3941.0], [49.9, 3943.0], [50.0, 3943.0], [50.1, 3947.0], [50.2, 3947.0], [50.3, 3953.0], [50.4, 3970.0], [50.5, 3979.0], [50.6, 3993.0], [50.7, 4002.0], [50.8, 4004.0], [50.9, 4004.0], [51.0, 4016.0], [51.1, 4022.0], [51.2, 4022.0], [51.3, 4025.0], [51.4, 4045.0], [51.5, 4052.0], [51.6, 4056.0], [51.7, 4060.0], [51.8, 4062.0], [51.9, 4065.0], [52.0, 4066.0], [52.1, 4069.0], [52.2, 4070.0], [52.3, 4070.0], [52.4, 4071.0], [52.5, 4071.0], [52.6, 4073.0], [52.7, 4076.0], [52.8, 4077.0], [52.9, 4080.0], [53.0, 4082.0], [53.1, 4083.0], [53.2, 4083.0], [53.3, 4086.0], [53.4, 4092.0], [53.5, 4093.0], [53.6, 4101.0], [53.7, 4111.0], [53.8, 4112.0], [53.9, 4129.0], [54.0, 4134.0], [54.1, 4135.0], [54.2, 4137.0], [54.3, 4140.0], [54.4, 4146.0], [54.5, 4151.0], [54.6, 4161.0], [54.7, 4167.0], [54.8, 4171.0], [54.9, 4173.0], [55.0, 4173.0], [55.1, 4176.0], [55.2, 4179.0], [55.3, 4183.0], [55.4, 4184.0], [55.5, 4191.0], [55.6, 4195.0], [55.7, 4195.0], [55.8, 4197.0], [55.9, 4198.0], [56.0, 4198.0], [56.1, 4199.0], [56.2, 4204.0], [56.3, 4205.0], [56.4, 4206.0], [56.5, 4206.0], [56.6, 4208.0], [56.7, 4209.0], [56.8, 4211.0], [56.9, 4216.0], [57.0, 4216.0], [57.1, 4219.0], [57.2, 4219.0], [57.3, 4220.0], [57.4, 4221.0], [57.5, 4221.0], [57.6, 4224.0], [57.7, 4225.0], [57.8, 4227.0], [57.9, 4227.0], [58.0, 4230.0], [58.1, 4231.0], [58.2, 4234.0], [58.3, 4236.0], [58.4, 4236.0], [58.5, 4239.0], [58.6, 4240.0], [58.7, 4240.0], [58.8, 4241.0], [58.9, 4241.0], [59.0, 4244.0], [59.1, 4245.0], [59.2, 4245.0], [59.3, 4246.0], [59.4, 4247.0], [59.5, 4247.0], [59.6, 4250.0], [59.7, 4251.0], [59.8, 4252.0], [59.9, 4253.0], [60.0, 4254.0], [60.1, 4254.0], [60.2, 4255.0], [60.3, 4256.0], [60.4, 4257.0], [60.5, 4258.0], [60.6, 4258.0], [60.7, 4259.0], [60.8, 4260.0], [60.9, 4260.0], [61.0, 4260.0], [61.1, 4260.0], [61.2, 4261.0], [61.3, 4262.0], [61.4, 4262.0], [61.5, 4263.0], [61.6, 4263.0], [61.7, 4268.0], [61.8, 4269.0], [61.9, 4269.0], [62.0, 4269.0], [62.1, 4270.0], [62.2, 4270.0], [62.3, 4271.0], [62.4, 4271.0], [62.5, 4272.0], [62.6, 4273.0], [62.7, 4276.0], [62.8, 4277.0], [62.9, 4277.0], [63.0, 4277.0], [63.1, 4278.0], [63.2, 4278.0], [63.3, 4280.0], [63.4, 4281.0], [63.5, 4281.0], [63.6, 4284.0], [63.7, 4287.0], [63.8, 4287.0], [63.9, 4289.0], [64.0, 4290.0], [64.1, 4290.0], [64.2, 4292.0], [64.3, 4292.0], [64.4, 4293.0], [64.5, 4300.0], [64.6, 4300.0], [64.7, 4302.0], [64.8, 4302.0], [64.9, 4305.0], [65.0, 4306.0], [65.1, 4306.0], [65.2, 4307.0], [65.3, 4307.0], [65.4, 4307.0], [65.5, 4308.0], [65.6, 4309.0], [65.7, 4309.0], [65.8, 4309.0], [65.9, 4310.0], [66.0, 4311.0], [66.1, 4311.0], [66.2, 4313.0], [66.3, 4314.0], [66.4, 4314.0], [66.5, 4318.0], [66.6, 4320.0], [66.7, 4321.0], [66.8, 4322.0], [66.9, 4323.0], [67.0, 4325.0], [67.1, 4327.0], [67.2, 4330.0], [67.3, 4332.0], [67.4, 4332.0], [67.5, 4336.0], [67.6, 4338.0], [67.7, 4339.0], [67.8, 4339.0], [67.9, 4341.0], [68.0, 4343.0], [68.1, 4347.0], [68.2, 4347.0], [68.3, 4348.0], [68.4, 4349.0], [68.5, 4350.0], [68.6, 4350.0], [68.7, 4354.0], [68.8, 4354.0], [68.9, 4356.0], [69.0, 4358.0], [69.1, 4360.0], [69.2, 4363.0], [69.3, 4364.0], [69.4, 4364.0], [69.5, 4367.0], [69.6, 4384.0], [69.7, 4387.0], [69.8, 4388.0], [69.9, 4390.0], [70.0, 4390.0], [70.1, 4393.0], [70.2, 4396.0], [70.3, 4400.0], [70.4, 4407.0], [70.5, 4407.0], [70.6, 4409.0], [70.7, 4410.0], [70.8, 4410.0], [70.9, 4413.0], [71.0, 4416.0], [71.1, 4417.0], [71.2, 4422.0], [71.3, 4430.0], [71.4, 4449.0], [71.5, 4453.0], [71.6, 4456.0], [71.7, 4456.0], [71.8, 4461.0], [71.9, 4470.0], [72.0, 4476.0], [72.1, 4477.0], [72.2, 4478.0], [72.3, 4479.0], [72.4, 4491.0], [72.5, 4500.0], [72.6, 4501.0], [72.7, 4518.0], [72.8, 4519.0], [72.9, 4523.0], [73.0, 4525.0], [73.1, 4525.0], [73.2, 4525.0], [73.3, 4527.0], [73.4, 4528.0], [73.5, 4536.0], [73.6, 4539.0], [73.7, 4550.0], [73.8, 4550.0], [73.9, 4551.0], [74.0, 4553.0], [74.1, 4561.0], [74.2, 4566.0], [74.3, 4568.0], [74.4, 4577.0], [74.5, 4584.0], [74.6, 4586.0], [74.7, 4594.0], [74.8, 4601.0], [74.9, 4604.0], [75.0, 4610.0], [75.1, 4612.0], [75.2, 4612.0], [75.3, 4615.0], [75.4, 4617.0], [75.5, 4620.0], [75.6, 4630.0], [75.7, 4631.0], [75.8, 4632.0], [75.9, 4633.0], [76.0, 4642.0], [76.1, 4642.0], [76.2, 4647.0], [76.3, 4647.0], [76.4, 4650.0], [76.5, 4655.0], [76.6, 4655.0], [76.7, 4658.0], [76.8, 4659.0], [76.9, 4674.0], [77.0, 4675.0], [77.1, 4677.0], [77.2, 4681.0], [77.3, 4685.0], [77.4, 4685.0], [77.5, 4685.0], [77.6, 4688.0], [77.7, 4691.0], [77.8, 4692.0], [77.9, 4695.0], [78.0, 4700.0], [78.1, 4704.0], [78.2, 4722.0], [78.3, 4727.0], [78.4, 4750.0], [78.5, 4754.0], [78.6, 4769.0], [78.7, 4772.0], [78.8, 4783.0], [78.9, 4795.0], [79.0, 4797.0], [79.1, 4806.0], [79.2, 4812.0], [79.3, 4813.0], [79.4, 4820.0], [79.5, 4821.0], [79.6, 4822.0], [79.7, 4823.0], [79.8, 4831.0], [79.9, 4832.0], [80.0, 4833.0], [80.1, 4833.0], [80.2, 4833.0], [80.3, 4834.0], [80.4, 4839.0], [80.5, 4839.0], [80.6, 4840.0], [80.7, 4844.0], [80.8, 4850.0], [80.9, 4851.0], [81.0, 4851.0], [81.1, 4851.0], [81.2, 4851.0], [81.3, 4852.0], [81.4, 4852.0], [81.5, 4852.0], [81.6, 4853.0], [81.7, 4855.0], [81.8, 4856.0], [81.9, 4857.0], [82.0, 4859.0], [82.1, 4862.0], [82.2, 4870.0], [82.3, 4870.0], [82.4, 4900.0], [82.5, 4903.0], [82.6, 4906.0], [82.7, 4914.0], [82.8, 4917.0], [82.9, 4919.0], [83.0, 4925.0], [83.1, 4930.0], [83.2, 4930.0], [83.3, 4931.0], [83.4, 4933.0], [83.5, 4934.0], [83.6, 4935.0], [83.7, 4938.0], [83.8, 4939.0], [83.9, 4940.0], [84.0, 4941.0], [84.1, 4942.0], [84.2, 4943.0], [84.3, 4945.0], [84.4, 4953.0], [84.5, 4955.0], [84.6, 4961.0], [84.7, 4961.0], [84.8, 4962.0], [84.9, 4963.0], [85.0, 4965.0], [85.1, 4967.0], [85.2, 4969.0], [85.3, 4970.0], [85.4, 4972.0], [85.5, 4975.0], [85.6, 4975.0], [85.7, 4979.0], [85.8, 4979.0], [85.9, 4982.0], [86.0, 4983.0], [86.1, 4985.0], [86.2, 4985.0], [86.3, 4986.0], [86.4, 4988.0], [86.5, 4989.0], [86.6, 4991.0], [86.7, 4992.0], [86.8, 4993.0], [86.9, 4993.0], [87.0, 4994.0], [87.1, 4995.0], [87.2, 4998.0], [87.3, 4998.0], [87.4, 5000.0], [87.5, 5001.0], [87.6, 5001.0], [87.7, 5001.0], [87.8, 5002.0], [87.9, 5003.0], [88.0, 5003.0], [88.1, 5003.0], [88.2, 5004.0], [88.3, 5004.0], [88.4, 5004.0], [88.5, 5005.0], [88.6, 5005.0], [88.7, 5006.0], [88.8, 5008.0], [88.9, 5008.0], [89.0, 5010.0], [89.1, 5010.0], [89.2, 5010.0], [89.3, 5011.0], [89.4, 5011.0], [89.5, 5011.0], [89.6, 5011.0], [89.7, 5012.0], [89.8, 5012.0], [89.9, 5013.0], [90.0, 5013.0], [90.1, 5013.0], [90.2, 5014.0], [90.3, 5015.0], [90.4, 5016.0], [90.5, 5016.0], [90.6, 5018.0], [90.7, 5019.0], [90.8, 5019.0], [90.9, 5020.0], [91.0, 5020.0], [91.1, 5022.0], [91.2, 5023.0], [91.3, 5024.0], [91.4, 5025.0], [91.5, 5028.0], [91.6, 5031.0], [91.7, 5031.0], [91.8, 5031.0], [91.9, 5034.0], [92.0, 5036.0], [92.1, 5038.0], [92.2, 5038.0], [92.3, 5039.0], [92.4, 5040.0], [92.5, 5041.0], [92.6, 5046.0], [92.7, 5048.0], [92.8, 5048.0], [92.9, 5049.0], [93.0, 5049.0], [93.1, 5051.0], [93.2, 5052.0], [93.3, 5054.0], [93.4, 5056.0], [93.5, 5058.0], [93.6, 5066.0], [93.7, 5067.0], [93.8, 5072.0], [93.9, 5079.0], [94.0, 5081.0], [94.1, 5091.0], [94.2, 5095.0], [94.3, 5096.0], [94.4, 5101.0], [94.5, 5101.0], [94.6, 5102.0], [94.7, 5105.0], [94.8, 5108.0], [94.9, 5112.0], [95.0, 5116.0], [95.1, 5117.0], [95.2, 5117.0], [95.3, 5121.0], [95.4, 5124.0], [95.5, 5125.0], [95.6, 5125.0], [95.7, 5127.0], [95.8, 5127.0], [95.9, 5130.0], [96.0, 5130.0], [96.1, 5145.0], [96.2, 5149.0], [96.3, 5150.0], [96.4, 5152.0], [96.5, 5153.0], [96.6, 5153.0], [96.7, 5154.0], [96.8, 5154.0], [96.9, 5156.0], [97.0, 5161.0], [97.1, 5162.0], [97.2, 5165.0], [97.3, 5168.0], [97.4, 5169.0], [97.5, 5172.0], [97.6, 5173.0], [97.7, 5189.0], [97.8, 5190.0], [97.9, 5191.0], [98.0, 5191.0], [98.1, 5195.0], [98.2, 5200.0], [98.3, 5202.0], [98.4, 5204.0], [98.5, 5208.0], [98.6, 5212.0], [98.7, 5214.0], [98.8, 5215.0], [98.9, 5215.0], [99.0, 5219.0], [99.1, 5220.0], [99.2, 5224.0], [99.3, 5224.0], [99.4, 5545.0], [99.5, 5581.0], [99.6, 5750.0], [99.7, 5944.0], [99.8, 6684.0], [99.9, 7496.0]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[0.0, 670.0], [0.1, 719.0], [0.2, 720.0], [0.3, 720.0], [0.4, 731.0], [0.5, 733.0], [0.6, 745.0], [0.7, 763.0], [0.8, 775.0], [0.9, 862.0], [1.0, 862.0], [1.1, 864.0], [1.2, 868.0], [1.3, 891.0], [1.4, 891.0], [1.5, 909.0], [1.6, 931.0], [1.7, 964.0], [1.8, 968.0], [1.9, 998.0], [2.0, 1006.0], [2.1, 1016.0], [2.2, 1073.0], [2.3, 1081.0], [2.4, 1130.0], [2.5, 1133.0], [2.6, 1138.0], [2.7, 1139.0], [2.8, 1178.0], [2.9, 1220.0], [3.0, 1232.0], [3.1, 1233.0], [3.2, 1235.0], [3.3, 1238.0], [3.4, 1242.0], [3.5, 1260.0], [3.6, 1280.0], [3.7, 1283.0], [3.8, 1288.0], [3.9, 1289.0], [4.0, 1290.0], [4.1, 1291.0], [4.2, 1293.0], [4.3, 1312.0], [4.4, 1352.0], [4.5, 1461.0], [4.6, 1463.0], [4.7, 1482.0], [4.8, 1485.0], [4.9, 1517.0], [5.0, 1519.0], [5.1, 1533.0], [5.2, 1533.0], [5.3, 1547.0], [5.4, 1559.0], [5.5, 1564.0], [5.6, 1596.0], [5.7, 1622.0], [5.8, 1696.0], [5.9, 1736.0], [6.0, 1813.0], [6.1, 1867.0], [6.2, 1889.0], [6.3, 1892.0], [6.4, 1917.0], [6.5, 1936.0], [6.6, 1950.0], [6.7, 1960.0], [6.8, 1972.0], [6.9, 1992.0], [7.0, 1994.0], [7.1, 2019.0], [7.2, 2026.0], [7.3, 2063.0], [7.4, 2085.0], [7.5, 2089.0], [7.6, 2095.0], [7.7, 2162.0], [7.8, 2172.0], [7.9, 2184.0], [8.0, 2193.0], [8.1, 2209.0], [8.2, 2216.0], [8.3, 2230.0], [8.4, 2239.0], [8.5, 2281.0], [8.6, 2315.0], [8.7, 2334.0], [8.8, 2335.0], [8.9, 2440.0], [9.0, 2474.0], [9.1, 2498.0], [9.2, 2510.0], [9.3, 2517.0], [9.4, 2554.0], [9.5, 2569.0], [9.6, 2577.0], [9.7, 2625.0], [9.8, 2629.0], [9.9, 2638.0], [10.0, 2641.0], [10.1, 2655.0], [10.2, 2656.0], [10.3, 2700.0], [10.4, 2711.0], [10.5, 2752.0], [10.6, 2772.0], [10.7, 2776.0], [10.8, 2780.0], [10.9, 2788.0], [11.0, 2793.0], [11.1, 2795.0], [11.2, 2804.0], [11.3, 2804.0], [11.4, 2805.0], [11.5, 2839.0], [11.6, 2850.0], [11.7, 2855.0], [11.8, 2870.0], [11.9, 2888.0], [12.0, 2899.0], [12.1, 2899.0], [12.2, 2910.0], [12.3, 2914.0], [12.4, 2917.0], [12.5, 2918.0], [12.6, 2920.0], [12.7, 2922.0], [12.8, 2923.0], [12.9, 2937.0], [13.0, 2937.0], [13.1, 2947.0], [13.2, 2972.0], [13.3, 2975.0], [13.4, 2976.0], [13.5, 2984.0], [13.6, 2994.0], [13.7, 3002.0], [13.8, 3011.0], [13.9, 3027.0], [14.0, 3036.0], [14.1, 3042.0], [14.2, 3061.0], [14.3, 3080.0], [14.4, 3081.0], [14.5, 3081.0], [14.6, 3083.0], [14.7, 3098.0], [14.8, 3101.0], [14.9, 3108.0], [15.0, 3110.0], [15.1, 3132.0], [15.2, 3134.0], [15.3, 3139.0], [15.4, 3168.0], [15.5, 3179.0], [15.6, 3188.0], [15.7, 3191.0], [15.8, 3202.0], [15.9, 3205.0], [16.0, 3206.0], [16.1, 3229.0], [16.2, 3248.0], [16.3, 3261.0], [16.4, 3276.0], [16.5, 3319.0], [16.6, 3330.0], [16.7, 3334.0], [16.8, 3336.0], [16.9, 3343.0], [17.0, 3344.0], [17.1, 3356.0], [17.2, 3378.0], [17.3, 3392.0], [17.4, 3396.0], [17.5, 3398.0], [17.6, 3407.0], [17.7, 3413.0], [17.8, 3436.0], [17.9, 3451.0], [18.0, 3464.0], [18.1, 3465.0], [18.2, 3469.0], [18.3, 3472.0], [18.4, 3476.0], [18.5, 3477.0], [18.6, 3483.0], [18.7, 3487.0], [18.8, 3495.0], [18.9, 3495.0], [19.0, 3509.0], [19.1, 3517.0], [19.2, 3523.0], [19.3, 3538.0], [19.4, 3547.0], [19.5, 3550.0], [19.6, 3561.0], [19.7, 3565.0], [19.8, 3591.0], [19.9, 3612.0], [20.0, 3616.0], [20.1, 3630.0], [20.2, 3643.0], [20.3, 3644.0], [20.4, 3662.0], [20.5, 3667.0], [20.6, 3668.0], [20.7, 3671.0], [20.8, 3678.0], [20.9, 3685.0], [21.0, 3710.0], [21.1, 3711.0], [21.2, 3716.0], [21.3, 3736.0], [21.4, 3762.0], [21.5, 3781.0], [21.6, 3782.0], [21.7, 3786.0], [21.8, 3788.0], [21.9, 3806.0], [22.0, 3821.0], [22.1, 3836.0], [22.2, 3845.0], [22.3, 3852.0], [22.4, 3855.0], [22.5, 3867.0], [22.6, 3871.0], [22.7, 3875.0], [22.8, 3886.0], [22.9, 3888.0], [23.0, 3891.0], [23.1, 3904.0], [23.2, 3909.0], [23.3, 3918.0], [23.4, 3950.0], [23.5, 3954.0], [23.6, 3963.0], [23.7, 3970.0], [23.8, 3973.0], [23.9, 3974.0], [24.0, 3995.0], [24.1, 4005.0], [24.2, 4029.0], [24.3, 4041.0], [24.4, 4050.0], [24.5, 4053.0], [24.6, 4055.0], [24.7, 4058.0], [24.8, 4066.0], [24.9, 4067.0], [25.0, 4071.0], [25.1, 4083.0], [25.2, 4086.0], [25.3, 4093.0], [25.4, 4093.0], [25.5, 4096.0], [25.6, 4099.0], [25.7, 4113.0], [25.8, 4113.0], [25.9, 4115.0], [26.0, 4147.0], [26.1, 4155.0], [26.2, 4163.0], [26.3, 4166.0], [26.4, 4174.0], [26.5, 4175.0], [26.6, 4182.0], [26.7, 4183.0], [26.8, 4188.0], [26.9, 4189.0], [27.0, 4196.0], [27.1, 4198.0], [27.2, 4207.0], [27.3, 4209.0], [27.4, 4210.0], [27.5, 4223.0], [27.6, 4229.0], [27.7, 4237.0], [27.8, 4240.0], [27.9, 4242.0], [28.0, 4257.0], [28.1, 4258.0], [28.2, 4277.0], [28.3, 4288.0], [28.4, 4290.0], [28.5, 4325.0], [28.6, 4331.0], [28.7, 4336.0], [28.8, 4337.0], [28.9, 4346.0], [29.0, 4348.0], [29.1, 4356.0], [29.2, 4357.0], [29.3, 4358.0], [29.4, 4360.0], [29.5, 4362.0], [29.6, 4363.0], [29.7, 4369.0], [29.8, 4390.0], [29.9, 4395.0], [30.0, 4406.0], [30.1, 4421.0], [30.2, 4439.0], [30.3, 4453.0], [30.4, 4454.0], [30.5, 4454.0], [30.6, 4464.0], [30.7, 4468.0], [30.8, 4479.0], [30.9, 4489.0], [31.0, 4502.0], [31.1, 4515.0], [31.2, 4518.0], [31.3, 4519.0], [31.4, 4523.0], [31.5, 4525.0], [31.6, 4527.0], [31.7, 4529.0], [31.8, 4530.0], [31.9, 4530.0], [32.0, 4534.0], [32.1, 4535.0], [32.2, 4536.0], [32.3, 4541.0], [32.4, 4543.0], [32.5, 4548.0], [32.6, 4548.0], [32.7, 4549.0], [32.8, 4550.0], [32.9, 4550.0], [33.0, 4552.0], [33.1, 4555.0], [33.2, 4562.0], [33.3, 4562.0], [33.4, 4562.0], [33.5, 4571.0], [33.6, 4572.0], [33.7, 4578.0], [33.8, 4579.0], [33.9, 4586.0], [34.0, 4590.0], [34.1, 4591.0], [34.2, 4593.0], [34.3, 4598.0], [34.4, 4599.0], [34.5, 4605.0], [34.6, 4609.0], [34.7, 4620.0], [34.8, 4629.0], [34.9, 4639.0], [35.0, 4640.0], [35.1, 4641.0], [35.2, 4642.0], [35.3, 4653.0], [35.4, 4654.0], [35.5, 4655.0], [35.6, 4658.0], [35.7, 4662.0], [35.8, 4669.0], [35.9, 4678.0], [36.0, 4688.0], [36.1, 4688.0], [36.2, 4693.0], [36.3, 4694.0], [36.4, 4697.0], [36.5, 4698.0], [36.6, 4700.0], [36.7, 4700.0], [36.8, 4707.0], [36.9, 4708.0], [37.0, 4714.0], [37.1, 4714.0], [37.2, 4728.0], [37.3, 4734.0], [37.4, 4744.0], [37.5, 4752.0], [37.6, 4756.0], [37.7, 4769.0], [37.8, 4772.0], [37.9, 4773.0], [38.0, 4775.0], [38.1, 4775.0], [38.2, 4776.0], [38.3, 4780.0], [38.4, 4781.0], [38.5, 4784.0], [38.6, 4786.0], [38.7, 4791.0], [38.8, 4791.0], [38.9, 4794.0], [39.0, 4795.0], [39.1, 4797.0], [39.2, 4798.0], [39.3, 4798.0], [39.4, 4800.0], [39.5, 4801.0], [39.6, 4808.0], [39.7, 4812.0], [39.8, 4813.0], [39.9, 4815.0], [40.0, 4819.0], [40.1, 4819.0], [40.2, 4824.0], [40.3, 4830.0], [40.4, 4833.0], [40.5, 4837.0], [40.6, 4839.0], [40.7, 4840.0], [40.8, 4841.0], [40.9, 4849.0], [41.0, 4849.0], [41.1, 4850.0], [41.2, 4852.0], [41.3, 4853.0], [41.4, 4855.0], [41.5, 4857.0], [41.6, 4858.0], [41.7, 4858.0], [41.8, 4859.0], [41.9, 4860.0], [42.0, 4860.0], [42.1, 4863.0], [42.2, 4864.0], [42.3, 4868.0], [42.4, 4873.0], [42.5, 4874.0], [42.6, 4875.0], [42.7, 4877.0], [42.8, 4877.0], [42.9, 4882.0], [43.0, 4890.0], [43.1, 4893.0], [43.2, 4893.0], [43.3, 4896.0], [43.4, 4900.0], [43.5, 4900.0], [43.6, 4905.0], [43.7, 4907.0], [43.8, 4911.0], [43.9, 4913.0], [44.0, 4914.0], [44.1, 4915.0], [44.2, 4915.0], [44.3, 4925.0], [44.4, 4943.0], [44.5, 4943.0], [44.6, 4946.0], [44.7, 4946.0], [44.8, 4964.0], [44.9, 4971.0], [45.0, 4974.0], [45.1, 4988.0], [45.2, 4991.0], [45.3, 5015.0], [45.4, 5017.0], [45.5, 5021.0], [45.6, 5025.0], [45.7, 5026.0], [45.8, 5051.0], [45.9, 5053.0], [46.0, 5053.0], [46.1, 5056.0], [46.2, 5058.0], [46.3, 5060.0], [46.4, 5060.0], [46.5, 5065.0], [46.6, 5065.0], [46.7, 5069.0], [46.8, 5075.0], [46.9, 5078.0], [47.0, 5083.0], [47.1, 5090.0], [47.2, 5096.0], [47.3, 5097.0], [47.4, 5098.0], [47.5, 5107.0], [47.6, 5108.0], [47.7, 5109.0], [47.8, 5111.0], [47.9, 5112.0], [48.0, 5113.0], [48.1, 5114.0], [48.2, 5115.0], [48.3, 5116.0], [48.4, 5116.0], [48.5, 5121.0], [48.6, 5129.0], [48.7, 5130.0], [48.8, 5130.0], [48.9, 5132.0], [49.0, 5132.0], [49.1, 5136.0], [49.2, 5141.0], [49.3, 5143.0], [49.4, 5145.0], [49.5, 5154.0], [49.6, 5155.0], [49.7, 5158.0], [49.8, 5159.0], [49.9, 5162.0], [50.0, 5163.0], [50.1, 5166.0], [50.2, 5166.0], [50.3, 5167.0], [50.4, 5169.0], [50.5, 5170.0], [50.6, 5178.0], [50.7, 5179.0], [50.8, 5182.0], [50.9, 5183.0], [51.0, 5188.0], [51.1, 5188.0], [51.2, 5188.0], [51.3, 5193.0], [51.4, 5197.0], [51.5, 5197.0], [51.6, 5200.0], [51.7, 5203.0], [51.8, 5206.0], [51.9, 5210.0], [52.0, 5211.0], [52.1, 5215.0], [52.2, 5222.0], [52.3, 5223.0], [52.4, 5235.0], [52.5, 5240.0], [52.6, 5240.0], [52.7, 5241.0], [52.8, 5244.0], [52.9, 5247.0], [53.0, 5247.0], [53.1, 5249.0], [53.2, 5251.0], [53.3, 5252.0], [53.4, 5256.0], [53.5, 5258.0], [53.6, 5259.0], [53.7, 5266.0], [53.8, 5267.0], [53.9, 5279.0], [54.0, 5279.0], [54.1, 5280.0], [54.2, 5281.0], [54.3, 5285.0], [54.4, 5286.0], [54.5, 5288.0], [54.6, 5288.0], [54.7, 5289.0], [54.8, 5290.0], [54.9, 5294.0], [55.0, 5296.0], [55.1, 5298.0], [55.2, 5307.0], [55.3, 5307.0], [55.4, 5308.0], [55.5, 5309.0], [55.6, 5309.0], [55.7, 5309.0], [55.8, 5311.0], [55.9, 5313.0], [56.0, 5316.0], [56.1, 5321.0], [56.2, 5322.0], [56.3, 5325.0], [56.4, 5328.0], [56.5, 5328.0], [56.6, 5329.0], [56.7, 5329.0], [56.8, 5330.0], [56.9, 5333.0], [57.0, 5338.0], [57.1, 5346.0], [57.2, 5348.0], [57.3, 5352.0], [57.4, 5352.0], [57.5, 5353.0], [57.6, 5354.0], [57.7, 5357.0], [57.8, 5360.0], [57.9, 5361.0], [58.0, 5361.0], [58.1, 5375.0], [58.2, 5375.0], [58.3, 5392.0], [58.4, 5402.0], [58.5, 5405.0], [58.6, 5408.0], [58.7, 5409.0], [58.8, 5411.0], [58.9, 5414.0], [59.0, 5420.0], [59.1, 5421.0], [59.2, 5424.0], [59.3, 5426.0], [59.4, 5433.0], [59.5, 5435.0], [59.6, 5439.0], [59.7, 5448.0], [59.8, 5452.0], [59.9, 5456.0], [60.0, 5456.0], [60.1, 5459.0], [60.2, 5460.0], [60.3, 5463.0], [60.4, 5483.0], [60.5, 5485.0], [60.6, 5486.0], [60.7, 5501.0], [60.8, 5504.0], [60.9, 5506.0], [61.0, 5525.0], [61.1, 5526.0], [61.2, 5529.0], [61.3, 5561.0], [61.4, 5582.0], [61.5, 5601.0], [61.6, 5609.0], [61.7, 5624.0], [61.8, 5647.0], [61.9, 5655.0], [62.0, 5656.0], [62.1, 5661.0], [62.2, 5678.0], [62.3, 5713.0], [62.4, 5721.0], [62.5, 5725.0], [62.6, 5726.0], [62.7, 5728.0], [62.8, 5731.0], [62.9, 5735.0], [63.0, 5751.0], [63.1, 5774.0], [63.2, 5776.0], [63.3, 5789.0], [63.4, 5797.0], [63.5, 5800.0], [63.6, 5810.0], [63.7, 5811.0], [63.8, 5814.0], [63.9, 5817.0], [64.0, 5817.0], [64.1, 5821.0], [64.2, 5821.0], [64.3, 5834.0], [64.4, 5835.0], [64.5, 5840.0], [64.6, 5842.0], [64.7, 5852.0], [64.8, 5860.0], [64.9, 5862.0], [65.0, 5869.0], [65.1, 5877.0], [65.2, 5878.0], [65.3, 5881.0], [65.4, 5882.0], [65.5, 5889.0], [65.6, 5909.0], [65.7, 5910.0], [65.8, 5911.0], [65.9, 5913.0], [66.0, 5914.0], [66.1, 5920.0], [66.2, 5927.0], [66.3, 5940.0], [66.4, 5944.0], [66.5, 5952.0], [66.6, 5955.0], [66.7, 5976.0], [66.8, 5985.0], [66.9, 5992.0], [67.0, 5993.0], [67.1, 5995.0], [67.2, 5998.0], [67.3, 6014.0], [67.4, 6016.0], [67.5, 6024.0], [67.6, 6029.0], [67.7, 6030.0], [67.8, 6032.0], [67.9, 6033.0], [68.0, 6037.0], [68.1, 6042.0], [68.2, 6044.0], [68.3, 6050.0], [68.4, 6054.0], [68.5, 6058.0], [68.6, 6059.0], [68.7, 6061.0], [68.8, 6067.0], [68.9, 6070.0], [69.0, 6079.0], [69.1, 6088.0], [69.2, 6096.0], [69.3, 6099.0], [69.4, 6099.0], [69.5, 6101.0], [69.6, 6106.0], [69.7, 6107.0], [69.8, 6115.0], [69.9, 6115.0], [70.0, 6116.0], [70.1, 6135.0], [70.2, 6142.0], [70.3, 6143.0], [70.4, 6144.0], [70.5, 6145.0], [70.6, 6148.0], [70.7, 6150.0], [70.8, 6156.0], [70.9, 6174.0], [71.0, 6180.0], [71.1, 6186.0], [71.2, 6191.0], [71.3, 6202.0], [71.4, 6204.0], [71.5, 6216.0], [71.6, 6216.0], [71.7, 6217.0], [71.8, 6217.0], [71.9, 6225.0], [72.0, 6227.0], [72.1, 6228.0], [72.2, 6229.0], [72.3, 6229.0], [72.4, 6229.0], [72.5, 6232.0], [72.6, 6236.0], [72.7, 6247.0], [72.8, 6254.0], [72.9, 6264.0], [73.0, 6266.0], [73.1, 6266.0], [73.2, 6279.0], [73.3, 6280.0], [73.4, 6283.0], [73.5, 6287.0], [73.6, 6290.0], [73.7, 6297.0], [73.8, 6298.0], [73.9, 6300.0], [74.0, 6307.0], [74.1, 6308.0], [74.2, 6311.0], [74.3, 6312.0], [74.4, 6316.0], [74.5, 6342.0], [74.6, 6346.0], [74.7, 6348.0], [74.8, 6349.0], [74.9, 6351.0], [75.0, 6371.0], [75.1, 6371.0], [75.2, 6385.0], [75.3, 6391.0], [75.4, 6394.0], [75.5, 6396.0], [75.6, 6396.0], [75.7, 6404.0], [75.8, 6406.0], [75.9, 6412.0], [76.0, 6419.0], [76.1, 6419.0], [76.2, 6426.0], [76.3, 6436.0], [76.4, 6460.0], [76.5, 6464.0], [76.6, 6464.0], [76.7, 6472.0], [76.8, 6478.0], [76.9, 6480.0], [77.0, 6484.0], [77.1, 6486.0], [77.2, 6495.0], [77.3, 6501.0], [77.4, 6506.0], [77.5, 6513.0], [77.6, 6513.0], [77.7, 6515.0], [77.8, 6519.0], [77.9, 6519.0], [78.0, 6520.0], [78.1, 6520.0], [78.2, 6522.0], [78.3, 6523.0], [78.4, 6524.0], [78.5, 6528.0], [78.6, 6531.0], [78.7, 6533.0], [78.8, 6538.0], [78.9, 6541.0], [79.0, 6543.0], [79.1, 6544.0], [79.2, 6544.0], [79.3, 6544.0], [79.4, 6545.0], [79.5, 6575.0], [79.6, 6577.0], [79.7, 6586.0], [79.8, 6587.0], [79.9, 6598.0], [80.0, 6601.0], [80.1, 6623.0], [80.2, 6630.0], [80.3, 6632.0], [80.4, 6632.0], [80.5, 6635.0], [80.6, 6635.0], [80.7, 6637.0], [80.8, 6645.0], [80.9, 6653.0], [81.0, 6655.0], [81.1, 6658.0], [81.2, 6659.0], [81.3, 6665.0], [81.4, 6667.0], [81.5, 6670.0], [81.6, 6676.0], [81.7, 6684.0], [81.8, 6688.0], [81.9, 6689.0], [82.0, 6691.0], [82.1, 6694.0], [82.2, 6695.0], [82.3, 6697.0], [82.4, 6702.0], [82.5, 6704.0], [82.6, 6709.0], [82.7, 6718.0], [82.8, 6720.0], [82.9, 6720.0], [83.0, 6722.0], [83.1, 6723.0], [83.2, 6724.0], [83.3, 6727.0], [83.4, 6728.0], [83.5, 6733.0], [83.6, 6733.0], [83.7, 6734.0], [83.8, 6735.0], [83.9, 6741.0], [84.0, 6743.0], [84.1, 6745.0], [84.2, 6747.0], [84.3, 6747.0], [84.4, 6749.0], [84.5, 6750.0], [84.6, 6751.0], [84.7, 6751.0], [84.8, 6751.0], [84.9, 6752.0], [85.0, 6762.0], [85.1, 6764.0], [85.2, 6766.0], [85.3, 6767.0], [85.4, 6775.0], [85.5, 6777.0], [85.6, 6779.0], [85.7, 6781.0], [85.8, 6786.0], [85.9, 6787.0], [86.0, 6792.0], [86.1, 6794.0], [86.2, 6797.0], [86.3, 6813.0], [86.4, 6814.0], [86.5, 6832.0], [86.6, 6837.0], [86.7, 6844.0], [86.8, 6846.0], [86.9, 6851.0], [87.0, 6851.0], [87.1, 6852.0], [87.2, 6853.0], [87.3, 6856.0], [87.4, 6861.0], [87.5, 6863.0], [87.6, 6866.0], [87.7, 6866.0], [87.8, 6897.0], [87.9, 6897.0], [88.0, 6903.0], [88.1, 6903.0], [88.2, 6904.0], [88.3, 6904.0], [88.4, 6905.0], [88.5, 6906.0], [88.6, 6908.0], [88.7, 6910.0], [88.8, 6912.0], [88.9, 6912.0], [89.0, 6924.0], [89.1, 6927.0], [89.2, 6927.0], [89.3, 6928.0], [89.4, 6932.0], [89.5, 6939.0], [89.6, 6944.0], [89.7, 6948.0], [89.8, 6959.0], [89.9, 6962.0], [90.0, 6964.0], [90.1, 6969.0], [90.2, 6969.0], [90.3, 6972.0], [90.4, 6978.0], [90.5, 6979.0], [90.6, 6995.0], [90.7, 6998.0], [90.8, 7004.0], [90.9, 7008.0], [91.0, 7009.0], [91.1, 7013.0], [91.2, 7024.0], [91.3, 7028.0], [91.4, 7033.0], [91.5, 7038.0], [91.6, 7069.0], [91.7, 7069.0], [91.8, 7082.0], [91.9, 7087.0], [92.0, 7090.0], [92.1, 7097.0], [92.2, 7117.0], [92.3, 7117.0], [92.4, 7120.0], [92.5, 7124.0], [92.6, 7128.0], [92.7, 7138.0], [92.8, 7140.0], [92.9, 7147.0], [93.0, 7147.0], [93.1, 7155.0], [93.2, 7159.0], [93.3, 7180.0], [93.4, 7184.0], [93.5, 7186.0], [93.6, 7191.0], [93.7, 7191.0], [93.8, 7193.0], [93.9, 7194.0], [94.0, 7203.0], [94.1, 7205.0], [94.2, 7205.0], [94.3, 7210.0], [94.4, 7211.0], [94.5, 7213.0], [94.6, 7214.0], [94.7, 7217.0], [94.8, 7220.0], [94.9, 7223.0], [95.0, 7225.0], [95.1, 7226.0], [95.2, 7230.0], [95.3, 7233.0], [95.4, 7244.0], [95.5, 7244.0], [95.6, 7245.0], [95.7, 7247.0], [95.8, 7253.0], [95.9, 7256.0], [96.0, 7260.0], [96.1, 7261.0], [96.2, 7264.0], [96.3, 7267.0], [96.4, 7273.0], [96.5, 7273.0], [96.6, 7273.0], [96.7, 7276.0], [96.8, 7278.0], [96.9, 7278.0], [97.0, 7289.0], [97.1, 7292.0], [97.2, 7292.0], [97.3, 7293.0], [97.4, 7304.0], [97.5, 7306.0], [97.6, 7309.0], [97.7, 7309.0], [97.8, 7310.0], [97.9, 7311.0], [98.0, 7314.0], [98.1, 7319.0], [98.2, 7322.0], [98.3, 7323.0], [98.4, 7324.0], [98.5, 7327.0], [98.6, 7327.0], [98.7, 7328.0], [98.8, 7332.0], [98.9, 7334.0], [99.0, 7340.0], [99.1, 7340.0], [99.2, 7342.0], [99.3, 7348.0], [99.4, 7361.0], [99.5, 7364.0], [99.6, 7432.0], [99.7, 7457.0], [99.8, 7773.0], [99.9, 8395.0]], "isOverall": false, "label": "GetAll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 191.0, "series": [{"data": [[600.0, 2.0], [700.0, 1.0], [900.0, 4.0], [1000.0, 1.0], [1100.0, 3.0], [1200.0, 23.0], [1300.0, 191.0], [1400.0, 22.0], [1500.0, 9.0], [1600.0, 8.0], [1700.0, 9.0], [1800.0, 7.0], [1900.0, 14.0], [2000.0, 9.0], [2100.0, 12.0], [2200.0, 10.0], [2300.0, 9.0], [2400.0, 11.0], [2500.0, 5.0], [2600.0, 19.0], [2700.0, 11.0], [2800.0, 3.0], [2900.0, 3.0], [3000.0, 2.0], [3100.0, 6.0], [3200.0, 3.0], [3300.0, 3.0], [3500.0, 6.0], [3600.0, 3.0], [3700.0, 4.0], [3800.0, 15.0], [3900.0, 18.0], [4000.0, 29.0], [4200.0, 83.0], [4100.0, 26.0], [4300.0, 58.0], [4600.0, 32.0], [4400.0, 22.0], [4500.0, 23.0], [4700.0, 12.0], [4800.0, 33.0], [5000.0, 70.0], [4900.0, 50.0], [5100.0, 38.0], [5200.0, 12.0], [5500.0, 2.0], [5700.0, 1.0], [5900.0, 1.0], [6600.0, 1.0], [7400.0, 1.0], [100.0, 18.0], [200.0, 19.0], [300.0, 21.0], [400.0, 1.0], [500.0, 1.0]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[600.0, 1.0], [700.0, 8.0], [800.0, 5.0], [900.0, 5.0], [1000.0, 4.0], [1100.0, 5.0], [1200.0, 14.0], [1300.0, 3.0], [1400.0, 4.0], [1500.0, 8.0], [1600.0, 2.0], [1700.0, 1.0], [1800.0, 4.0], [1900.0, 7.0], [2000.0, 6.0], [2100.0, 4.0], [2200.0, 5.0], [2300.0, 3.0], [2400.0, 3.0], [2500.0, 5.0], [2600.0, 6.0], [2700.0, 9.0], [2800.0, 10.0], [2900.0, 15.0], [3000.0, 11.0], [3100.0, 10.0], [3200.0, 7.0], [3300.0, 11.0], [3400.0, 13.0], [3500.0, 9.0], [3600.0, 11.0], [3700.0, 9.0], [3800.0, 12.0], [3900.0, 10.0], [4000.0, 16.0], [4100.0, 15.0], [4300.0, 15.0], [4200.0, 13.0], [4400.0, 10.0], [4500.0, 35.0], [4600.0, 21.0], [4700.0, 28.0], [4800.0, 40.0], [4900.0, 19.0], [5000.0, 22.0], [5100.0, 41.0], [5200.0, 36.0], [5300.0, 32.0], [5400.0, 23.0], [5600.0, 8.0], [5500.0, 8.0], [5700.0, 12.0], [5800.0, 21.0], [5900.0, 17.0], [6000.0, 22.0], [6100.0, 18.0], [6200.0, 26.0], [6300.0, 18.0], [6400.0, 17.0], [6500.0, 27.0], [6600.0, 24.0], [6800.0, 17.0], [6700.0, 39.0], [6900.0, 28.0], [7000.0, 14.0], [7100.0, 18.0], [7400.0, 2.0], [7200.0, 34.0], [7300.0, 22.0], [7700.0, 1.0], [8300.0, 1.0]], "isOverall": false, "label": "GetAll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 59.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1644.0, "series": [{"data": [[0.0, 59.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 297.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1644.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 518.4164999999991, "minX": 1.68062094E12, "maxY": 518.4164999999991, "series": [{"data": [[1.68062094E12, 518.4164999999991]], "isOverall": false, "label": "CreateGetAll", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062094E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 115.0, "minX": 1.0, "maxY": 8395.0, "series": [{"data": [[57.0, 279.2857142857143], [59.0, 305.0], [60.0, 248.0], [61.0, 284.75], [62.0, 291.25], [63.0, 350.0], [64.0, 340.0], [65.0, 201.0], [66.0, 196.85714285714286], [67.0, 182.5], [68.0, 136.0], [70.0, 129.0], [71.0, 153.0], [72.0, 245.0], [73.0, 339.54545454545456], [76.0, 157.0], [78.0, 335.0], [101.0, 115.0], [109.0, 191.0], [111.0, 202.0], [112.0, 180.0], [242.0, 649.0], [244.0, 705.0], [249.0, 687.0], [278.0, 981.0], [286.0, 952.0], [293.0, 1060.0], [298.0, 1100.0], [329.0, 1245.0], [328.0, 1289.0], [337.0, 1343.0], [341.0, 1340.0], [342.0, 1342.3333333333333], [344.0, 1344.0], [345.0, 1443.0], [347.0, 1322.0], [349.0, 1397.3333333333333], [351.0, 1371.3333333333333], [364.0, 1347.0], [353.0, 1356.0], [354.0, 1369.0], [356.0, 1353.0], [358.0, 1363.0], [361.0, 1370.0], [362.0, 1320.0], [363.0, 1378.5], [365.0, 1388.0], [366.0, 1381.0], [367.0, 1367.0], [369.0, 1590.0], [370.0, 1391.5], [371.0, 1398.0], [372.0, 1401.0], [373.0, 1398.0], [374.0, 1400.0], [377.0, 1391.0], [380.0, 1429.3333333333333], [385.0, 1396.6666666666667], [384.0, 1406.6666666666667], [387.0, 1394.0], [396.0, 1352.0], [397.0, 1349.5], [398.0, 1347.0], [399.0, 1348.2], [388.0, 1397.0], [389.0, 1411.0], [390.0, 1397.0], [391.0, 1381.5], [392.0, 1377.0], [393.0, 1366.0], [394.0, 1360.5], [395.0, 1355.0], [401.0, 1363.0], [400.0, 1357.0], [402.0, 1348.0], [403.0, 1345.0], [404.0, 1358.5], [405.0, 1347.75], [406.0, 1346.0], [407.0, 1347.0], [409.0, 1346.0], [413.0, 1341.0], [415.0, 1341.5], [410.0, 1341.0], [411.0, 1337.75], [417.0, 1334.6666666666667], [416.0, 1346.0], [418.0, 1334.0], [419.0, 1334.0], [420.0, 1336.25], [422.0, 3384.0], [423.0, 1342.0], [424.0, 1324.0], [429.0, 1347.5], [431.0, 1346.5], [425.0, 1346.3333333333333], [426.0, 1369.0], [427.0, 1342.75], [433.0, 1337.5], [432.0, 1342.5], [434.0, 1341.5], [435.0, 1335.0], [436.0, 1329.5], [437.0, 1333.5], [438.0, 1320.5], [439.0, 1317.0], [440.0, 1298.8], [446.0, 1282.5], [447.0, 1401.5], [444.0, 1285.0], [445.0, 1281.0], [441.0, 1307.0], [442.0, 1289.0], [448.0, 1276.0], [449.0, 1264.5], [450.0, 1303.0], [451.0, 1280.0], [452.0, 1472.0], [453.0, 1286.0], [467.0, 1194.0], [473.0, 1344.0], [474.0, 1346.0], [475.0, 1357.0], [477.0, 1350.0], [479.0, 1375.0], [492.0, 1380.5], [482.0, 1372.0], [481.0, 1375.0], [483.0, 1425.0], [494.0, 1416.0], [495.0, 1394.5], [484.0, 1433.0], [486.0, 1394.4], [488.0, 1348.0], [489.0, 1344.0], [490.0, 1374.5], [491.0, 1368.0], [499.0, 1373.0], [497.0, 1352.0], [496.0, 1388.5], [498.0, 1710.5], [501.0, 1392.0], [502.0, 1362.0], [505.0, 1357.0], [510.0, 1389.5], [511.0, 1393.0], [508.0, 1347.5], [509.0, 1346.0], [506.0, 4034.5], [507.0, 1351.0], [512.0, 1274.0], [514.0, 1355.0], [515.0, 1387.0], [518.0, 1344.0], [519.0, 1354.0], [526.0, 1346.0], [529.0, 954.0], [534.0, 564.0], [571.0, 5014.347826086956], [572.0, 5154.153846153846], [605.0, 3326.5], [589.0, 1247.0], [588.0, 1281.0], [585.0, 5112.857142857142], [584.0, 5130.0], [590.0, 1246.0], [600.0, 4979.0], [583.0, 5095.0], [582.0, 5107.666666666667], [591.0, 4961.0], [602.0, 5000.444444444444], [601.0, 5001.333333333333], [604.0, 5009.5], [603.0, 5001.0], [592.0, 4842.102564102566], [593.0, 4803.214285714285], [594.0, 1327.0], [595.0, 1516.0], [597.0, 4992.0], [599.0, 4989.142857142857], [598.0, 5021.666666666667], [606.0, 4189.25], [607.0, 5016.0], [613.0, 3585.5], [610.0, 1650.0], [609.0, 1562.0], [608.0, 5023.0], [611.0, 3227.0], [612.0, 5107.5], [614.0, 4016.571428571429], [615.0, 4524.25], [616.0, 3234.5], [621.0, 4851.0], [623.0, 1717.0], [624.0, 4654.5], [625.0, 4851.0], [637.0, 4544.428571428572], [636.0, 4772.0], [635.0, 4722.0], [634.0, 4811.8], [633.0, 4816.5], [627.0, 4226.2], [629.0, 2605.4], [671.0, 2029.0], [655.0, 1693.0], [654.0, 1672.0], [653.0, 4646.166666666666], [651.0, 4651.0], [650.0, 4633.0], [649.0, 4604.0], [648.0, 4635.9], [656.0, 1833.5], [657.0, 1671.0], [658.0, 2025.0], [659.0, 1964.0], [660.0, 3639.6666666666665], [663.0, 4501.0], [661.0, 4556.631578947368], [668.0, 3232.0], [665.0, 4283.0], [664.0, 4219.5], [647.0, 4677.0], [646.0, 4642.0], [641.0, 4692.666666666666], [640.0, 4700.0], [670.0, 4470.0], [669.0, 4546.777777777777], [683.0, 2018.0], [672.0, 2046.6666666666667], [674.0, 4408.2], [673.0, 4397.5], [675.0, 1776.0], [679.0, 1875.0], [695.0, 1973.0], [691.0, 4343.409090909091], [703.0, 4212.0], [699.0, 4269.375], [698.0, 4259.25], [697.0, 4259.0], [696.0, 2056.0], [680.0, 2135.0], [681.0, 3912.4], [682.0, 2155.0], [684.0, 2093.5], [685.0, 2199.0], [705.0, 2077.0], [704.0, 3357.8], [707.0, 4225.181818181817], [706.0, 4224.869565217391], [708.0, 4305.0], [709.0, 2176.0], [710.0, 3981.833333333333], [711.0, 4265.562500000001], [729.0, 4171.0], [728.0, 4219.333333333333], [730.0, 2460.0], [733.0, 2319.0], [721.0, 4292.0], [732.0, 4183.0], [722.0, 4017.5714285714284], [723.0, 3225.0], [724.0, 3918.4], [725.0, 4223.666666666667], [715.0, 2205.3333333333335], [714.0, 4291.0], [716.0, 3229.0], [717.0, 2313.0], [718.0, 2402.0], [749.0, 2583.0], [745.0, 3448.6666666666665], [746.0, 2259.0], [747.0, 2263.6666666666665], [750.0, 2404.5], [738.0, 4105.0], [742.0, 4072.0], [741.0, 4083.0], [761.0, 3915.8947368421054], [760.0, 3958.0], [762.0, 3592.1111111111113], [763.0, 2280.0], [765.0, 4184.0], [767.0, 2447.0], [766.0, 4236.0], [752.0, 2519.0], [753.0, 2187.0], [754.0, 4144.666666666667], [755.0, 2172.0], [756.0, 2500.5], [759.0, 4045.21052631579], [769.0, 3282.5], [770.0, 2797.0], [771.0, 2266.0], [772.0, 2280.0], [797.0, 2377.0], [796.0, 3777.0], [783.0, 3859.0], [782.0, 3943.0], [803.0, 3625.0], [805.0, 3542.375], [806.0, 2415.5], [807.0, 2799.6666666666665], [810.0, 2417.0], [811.0, 2417.0], [812.0, 3557.3333333333335], [808.0, 3154.0], [801.0, 3862.0], [860.0, 2662.0], [852.0, 2667.0], [838.0, 2545.0], [845.0, 3302.0], [853.0, 2647.0], [854.0, 2641.0], [855.0, 2997.6], [856.0, 2668.3333333333335], [859.0, 2678.0], [861.0, 2692.0], [848.0, 3180.0], [865.0, 2724.75], [864.0, 2646.0], [866.0, 2718.0], [875.0, 2727.0], [872.0, 3002.5], [879.0, 2764.0], [882.0, 2767.0], [883.0, 2771.0], [891.0, 2850.5], [881.0, 2878.25], [885.0, 2783.0]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[581.6679999999993, 3167.704]], "isOverall": false, "label": "Create-Aggregated", "isController": false}, {"data": [[2.0, 5116.0], [3.0, 7361.0], [4.0, 7348.0], [5.0, 7340.0], [6.0, 7334.0], [7.0, 7342.0], [8.0, 7323.0], [9.0, 7319.0], [10.0, 7306.0], [11.0, 7309.0], [12.0, 7310.0], [13.0, 7309.0], [14.0, 7314.0], [15.0, 7292.0], [16.0, 7278.0], [17.0, 7276.0], [18.0, 7289.0], [19.0, 7292.0], [20.0, 7247.0], [21.0, 7261.0], [22.0, 7273.0], [23.0, 7253.0], [24.0, 7244.0], [25.0, 7191.0], [26.0, 7186.0], [27.0, 7184.0], [28.0, 7217.0], [29.0, 7210.0], [30.0, 7191.0], [31.0, 7194.0], [33.0, 7205.0], [32.0, 7211.0], [35.0, 7117.0], [34.0, 7180.0], [37.0, 7128.0], [36.0, 7278.0], [39.0, 7260.0], [38.0, 7311.0], [41.0, 7244.0], [40.0, 7120.0], [43.0, 7267.0], [42.0, 7256.0], [45.0, 7147.0], [44.0, 7203.0], [47.0, 7226.0], [46.0, 7327.0], [49.0, 7205.0], [48.0, 7223.0], [51.0, 7140.0], [50.0, 7147.0], [53.0, 7457.0], [52.0, 7193.0], [55.0, 7293.0], [54.0, 7159.0], [57.0, 7364.0], [56.0, 7332.0], [59.0, 7324.0], [58.0, 7304.0], [61.0, 7273.0], [60.0, 7340.0], [63.0, 7327.0], [62.0, 7322.0], [67.0, 7225.0], [66.0, 7233.0], [65.0, 7220.0], [64.0, 7328.0], [71.0, 7230.0], [70.0, 7273.0], [69.0, 7213.0], [68.0, 7214.0], [75.0, 7117.0], [74.0, 7245.0], [73.0, 7264.0], [72.0, 7155.0], [79.0, 7038.0], [78.0, 7082.0], [77.0, 7090.0], [76.0, 7138.0], [83.0, 7069.0], [82.0, 7097.0], [81.0, 7124.0], [80.0, 7087.0], [87.0, 7004.0], [86.0, 7013.0], [85.0, 7051.0], [91.0, 6962.0], [90.0, 6939.0], [89.0, 6979.0], [88.0, 6972.0], [95.0, 6897.0], [94.0, 6944.0], [93.0, 6978.0], [99.0, 7008.0], [98.0, 7028.0], [97.0, 6948.0], [96.0, 6861.0], [103.0, 7009.0], [102.0, 6924.0], [101.0, 6897.0], [100.0, 6928.0], [107.0, 6998.0], [106.0, 6794.0], [105.0, 6851.0], [104.0, 6904.0], [111.0, 6978.0], [110.0, 6964.0], [109.0, 6969.0], [108.0, 6995.0], [115.0, 6905.0], [114.0, 6863.0], [113.0, 6959.0], [112.0, 6969.0], [119.0, 6903.0], [118.0, 6927.0], [117.0, 6903.0], [116.0, 6912.0], [123.0, 6906.0], [122.0, 6910.0], [121.0, 6904.0], [120.0, 6927.0], [127.0, 6856.0], [126.0, 6852.0], [125.0, 6908.0], [124.0, 6912.0], [135.0, 6813.0], [134.0, 6844.0], [133.0, 6853.0], [132.0, 6837.0], [131.0, 6866.0], [130.0, 6832.0], [129.0, 6866.0], [128.0, 6851.0], [143.0, 6752.0], [142.0, 6779.0], [141.0, 6749.0], [140.0, 6777.0], [139.0, 6735.0], [138.0, 6764.0], [137.0, 6766.0], [136.0, 6787.0], [151.0, 6846.0], [150.0, 6745.0], [149.0, 6751.0], [148.0, 6722.0], [147.0, 6743.0], [146.0, 6723.0], [145.0, 6751.0], [144.0, 6747.0], [159.0, 6653.0], [158.0, 6733.0], [157.0, 8395.0], [156.0, 6794.5], [154.0, 6709.0], [153.0, 6718.0], [152.0, 6704.0], [167.0, 6720.0], [166.0, 6775.0], [165.0, 6688.0], [164.0, 6733.0], [163.0, 6741.0], [162.0, 6751.0], [161.0, 6724.0], [160.0, 6747.0], [175.0, 6781.0], [174.0, 6786.0], [173.0, 6670.0], [172.0, 6655.0], [171.0, 6676.0], [170.0, 6697.0], [169.0, 6658.0], [168.0, 6767.0], [183.0, 6720.0], [182.0, 6695.0], [181.0, 6728.0], [180.0, 6727.0], [179.0, 6734.0], [178.0, 6630.0], [177.0, 6762.0], [176.0, 6665.0], [191.0, 6632.0], [190.0, 6637.0], [189.0, 6635.0], [188.0, 6667.0], [187.0, 6702.0], [186.0, 6694.0], [185.0, 6689.0], [184.0, 6750.0], [199.0, 6586.0], [198.0, 6601.0], [197.0, 6635.0], [196.0, 6645.0], [195.0, 6659.0], [194.0, 6623.0], [193.0, 6691.0], [192.0, 6684.0], [207.0, 6486.0], [206.0, 6533.0], [205.0, 6543.0], [204.0, 6544.0], [203.0, 6541.0], [202.0, 6538.0], [201.0, 6522.0], [200.0, 6544.0], [215.0, 6544.0], [214.0, 6523.0], [213.0, 6501.0], [212.0, 6577.0], [211.0, 6513.0], [210.0, 6575.0], [209.0, 6587.0], [208.0, 6495.0], [223.0, 6519.0], [222.0, 6515.0], [221.0, 6464.0], [220.0, 6528.0], [219.0, 7773.0], [218.0, 6632.0], [217.0, 6513.0], [216.0, 6520.0], [230.0, 6506.0], [229.0, 6531.0], [228.0, 6545.0], [227.0, 6491.0], [226.0, 6598.0], [225.0, 6480.0], [224.0, 6520.0], [239.0, 6396.0], [238.0, 6436.0], [237.0, 6349.0], [236.0, 6478.0], [235.0, 6472.0], [234.0, 6464.0], [233.0, 6484.0], [232.0, 6521.5], [247.0, 6351.0], [246.0, 6419.0], [245.0, 6396.0], [244.0, 6371.0], [243.0, 6371.0], [242.0, 6460.0], [241.0, 6406.0], [240.0, 6404.0], [250.0, 3508.0], [249.0, 3533.5], [251.0, 3519.0], [252.0, 3576.0], [253.0, 3577.0], [255.0, 6426.0], [254.0, 6412.0], [248.0, 6300.0], [259.0, 3572.0], [256.0, 3552.5], [263.0, 6297.0], [262.0, 6298.0], [261.0, 6311.0], [260.0, 6342.0], [257.0, 3562.0], [258.0, 2609.333333333333], [271.0, 6217.0], [265.0, 6312.0], [264.0, 6283.0], [270.0, 6264.0], [269.0, 6232.0], [268.0, 6279.0], [267.0, 6236.0], [266.0, 6290.0], [286.0, 3607.5], [273.0, 3564.0], [276.0, 2221.5], [277.0, 6266.0], [275.0, 3627.5], [274.0, 6227.0], [278.0, 3547.5], [279.0, 6229.0], [272.0, 6229.0], [287.0, 3566.5], [281.0, 6254.0], [280.0, 6216.0], [285.0, 6229.0], [284.0, 6225.0], [283.0, 6228.0], [282.0, 6216.0], [302.0, 2769.0], [288.0, 3572.0], [294.0, 3581.0], [293.0, 6191.0], [292.0, 6061.0], [295.0, 6150.0], [298.0, 2321.25], [300.0, 4285.0], [291.0, 6186.0], [290.0, 6174.0], [289.0, 6079.0], [301.0, 3594.5], [303.0, 6144.0], [299.0, 6067.0], [297.0, 6145.0], [296.0, 6142.0], [319.0, 5985.0], [310.0, 3659.5], [309.0, 3642.0], [308.0, 6099.0], [313.0, 3675.5], [312.0, 6101.0], [318.0, 3612.0], [317.0, 6070.0], [316.0, 6088.0], [311.0, 6115.0], [304.0, 6143.0], [306.0, 6042.0], [305.0, 6148.0], [307.0, 6135.0], [315.0, 6096.0], [314.0, 6107.0], [333.0, 2900.0], [328.0, 3626.5], [332.0, 2846.0], [323.0, 6032.0], [322.0, 5993.0], [321.0, 5976.0], [320.0, 6029.0], [331.0, 3685.5], [330.0, 3603.5], [329.0, 3645.0], [334.0, 3668.5], [335.0, 6037.0], [327.0, 5955.0], [326.0, 6014.0], [325.0, 6024.0], [324.0, 5995.0], [350.0, 5909.0], [351.0, 5878.0], [349.0, 5889.0], [348.0, 5882.0], [347.0, 5904.0], [346.0, 5910.0], [345.0, 5877.0], [344.0, 5944.0], [343.0, 5913.0], [336.0, 6033.0], [338.0, 4257.0], [337.0, 5998.0], [342.0, 5920.0], [341.0, 5952.0], [340.0, 5911.0], [366.0, 5725.0], [364.0, 3636.0], [367.0, 3627.0], [365.0, 5797.0], [363.0, 5800.0], [362.0, 5817.0], [361.0, 5814.0], [360.0, 5817.0], [359.0, 5835.0], [353.0, 5860.0], [352.0, 5869.0], [355.0, 5852.0], [354.0, 5862.0], [358.0, 5834.0], [357.0, 5810.0], [356.0, 5821.0], [383.0, 5751.0], [369.0, 2585.0], [368.0, 2591.75], [375.0, 5789.0], [374.0, 5713.0], [373.0, 5726.0], [372.0, 5731.0], [378.0, 3660.5], [380.0, 3618.5], [371.0, 5842.0], [370.0, 5776.0], [382.0, 5609.0], [381.0, 5661.0], [379.0, 5647.0], [377.0, 5728.0], [376.0, 5821.0], [398.0, 5460.0], [399.0, 5352.0], [397.0, 5354.0], [396.0, 5433.0], [395.0, 5361.0], [394.0, 5439.0], [393.0, 5506.0], [392.0, 5486.0], [391.0, 5504.0], [385.0, 5582.0], [384.0, 5655.0], [387.0, 5526.0], [386.0, 5529.0], [390.0, 5501.0], [389.0, 5525.0], [388.0, 5656.0], [414.0, 5288.0], [415.0, 5215.0], [413.0, 5309.0], [412.0, 5308.0], [411.0, 5333.0], [410.0, 5240.0], [409.0, 5288.0], [408.0, 5279.0], [407.0, 3974.0], [401.0, 5361.0], [400.0, 5352.0], [403.0, 5307.0], [402.0, 5348.0], [406.0, 5328.0], [405.0, 5329.0], [404.0, 5307.0], [430.0, 5116.0], [431.0, 5223.0], [429.0, 5162.0], [428.0, 5188.0], [427.0, 5259.0], [426.0, 5132.0], [425.0, 5182.0], [424.0, 5097.0], [423.0, 5145.0], [417.0, 5183.0], [416.0, 5222.0], [419.0, 5167.0], [418.0, 5252.0], [422.0, 5210.0], [421.0, 5170.0], [420.0, 5159.0], [446.0, 5601.0], [447.0, 5456.0], [445.0, 5561.0], [444.0, 5286.0], [443.0, 5112.0], [442.0, 5166.0], [441.0, 5353.0], [440.0, 5096.0], [439.0, 5053.0], [433.0, 5143.0], [432.0, 5114.0], [435.0, 5078.0], [434.0, 5083.0], [438.0, 5115.0], [437.0, 5130.0], [436.0, 5130.0], [462.0, 5296.0], [463.0, 4882.0], [461.0, 4860.0], [460.0, 4873.0], [459.0, 5426.0], [458.0, 5465.333333333333], [456.0, 4974.0], [455.0, 5392.0], [448.0, 5313.0], [451.0, 5483.0], [449.0, 5026.0], [454.0, 5456.0], [453.0, 5405.0], [452.0, 4971.0], [479.0, 3431.5], [471.0, 3466.5], [470.0, 4905.0], [469.0, 4786.0], [468.0, 5141.0], [472.0, 3588.5], [478.0, 4900.0], [477.0, 4850.0], [476.0, 4775.0], [467.0, 4795.0], [466.0, 5251.0], [465.0, 4860.0], [464.0, 5247.0], [475.0, 4896.0], [474.0, 4773.0], [473.0, 4913.0], [494.0, 4849.0], [480.0, 3441.5], [487.0, 3492.5], [486.0, 4964.0], [485.0, 4946.0], [484.0, 4775.0], [495.0, 4900.0], [493.0, 4893.0], [492.0, 4857.0], [483.0, 4915.0], [482.0, 4914.0], [481.0, 3591.0], [491.0, 4855.0], [490.0, 4858.0], [489.0, 4849.0], [488.0, 4925.0], [510.0, 5107.0], [511.0, 4798.0], [509.0, 4688.0], [508.0, 4707.0], [507.0, 4698.0], [506.0, 4756.0], [505.0, 4815.0], [504.0, 4875.0], [503.0, 5069.0], [497.0, 6814.0], [496.0, 4819.0], [499.0, 4837.0], [498.0, 4812.0], [502.0, 4797.0], [501.0, 4839.0], [500.0, 4833.0], [541.0, 4813.0], [515.0, 3701.0], [528.0, 2969.0], [529.0, 4808.0], [531.0, 4655.0], [530.0, 4562.0], [533.0, 4830.0], [532.0, 4791.0], [535.0, 4780.0], [534.0, 4819.0], [527.0, 3345.0], [512.0, 5211.0], [514.0, 5193.0], [513.0, 5624.0], [526.0, 4519.0], [525.0, 4529.0], [524.0, 4489.0], [523.0, 4572.0], [522.0, 4591.0], [521.0, 4541.0], [520.0, 4535.0], [543.0, 4791.0], [542.0, 5169.0], [540.0, 5179.0], [539.0, 4877.0], [538.0, 4864.0], [537.0, 4840.0], [536.0, 5166.0], [519.0, 4549.0], [518.0, 4609.0], [517.0, 4598.0], [516.0, 5058.0], [573.0, 3586.5], [572.0, 3622.5], [575.0, 5241.0], [574.0, 5235.0], [571.0, 5279.0], [570.0, 5357.0], [569.0, 5289.0], [568.0, 5360.0], [551.0, 5108.0], [550.0, 5408.0], [549.0, 5421.0], [548.0, 5136.0], [547.0, 5316.0], [546.0, 5154.0], [545.0, 5090.0], [544.0, 5111.0], [559.0, 5249.0], [558.0, 3139.0], [557.0, 5325.0], [556.0, 5411.0], [555.0, 5409.0], [554.0, 5448.0], [553.0, 5375.0], [552.0, 5281.0], [567.0, 5298.0], [566.0, 5322.0], [565.0, 5402.0], [564.0, 5346.0], [563.0, 5435.0], [562.0, 5290.0], [561.0, 5375.0], [560.0, 5424.0], [604.0, 5188.0], [584.0, 3351.5], [585.0, 5113.0], [586.0, 3301.0], [587.0, 3660.0], [589.0, 5309.0], [588.0, 5321.0], [591.0, 5266.0], [577.0, 3476.0], [576.0, 3472.0], [579.0, 5163.0], [578.0, 5197.0], [581.0, 5132.0], [580.0, 5155.0], [583.0, 5098.0], [582.0, 5258.0], [590.0, 5329.0], [601.0, 5267.0], [600.0, 5203.0], [607.0, 5129.0], [593.0, 5330.0], [592.0, 5463.0], [595.0, 5294.0], [594.0, 5280.0], [597.0, 5285.0], [596.0, 5338.0], [599.0, 5206.0], [598.0, 5244.0], [606.0, 5188.0], [605.0, 5197.0], [603.0, 5200.0], [602.0, 5247.0], [637.0, 1288.0], [619.0, 2972.333333333333], [618.0, 5060.0], [617.0, 5056.0], [616.0, 5025.0], [620.0, 5121.0], [622.0, 5065.0], [621.0, 5015.0], [623.0, 3477.0], [627.0, 3189.0], [626.0, 4943.0], [625.0, 4946.0], [624.0, 5017.0], [629.0, 4877.0], [628.0, 4943.0], [631.0, 4841.0], [630.0, 4859.0], [634.0, 3227.0], [633.0, 4911.0], [632.0, 4893.0], [615.0, 4988.0], [614.0, 4991.0], [613.0, 5021.0], [612.0, 5109.0], [611.0, 5051.0], [610.0, 5053.0], [609.0, 5060.0], [608.0, 5178.0], [639.0, 4863.0], [638.0, 4874.0], [636.0, 4853.0], [635.0, 4858.0], [668.0, 4593.0], [671.0, 4562.0], [657.0, 4693.0], [656.0, 4701.0], [659.0, 4700.0], [658.0, 4697.0], [661.0, 4694.0], [660.0, 4700.0], [670.0, 4579.0], [669.0, 4599.0], [667.0, 4605.0], [666.0, 4590.0], [665.0, 4629.0], [664.0, 4641.0], [654.0, 4708.0], [641.0, 4824.0], [640.0, 4852.0], [643.0, 4776.0], [642.0, 4784.0], [645.0, 4772.0], [644.0, 4801.0], [647.0, 4798.0], [646.0, 4781.0], [653.0, 4728.0], [652.0, 4734.0], [651.0, 4714.0], [650.0, 4744.0], [649.0, 4752.0], [648.0, 4868.0], [663.0, 4640.0], [662.0, 4653.0], [701.0, 4642.0], [673.0, 3122.0], [675.0, 2893.0], [674.0, 4527.0], [676.0, 4550.0], [678.0, 4525.0], [677.0, 4555.0], [696.0, 4337.0], [679.0, 4530.0], [698.0, 4662.0], [697.0, 4358.0], [680.0, 3144.0], [681.0, 4515.0], [683.0, 4454.0], [682.0, 4464.0], [685.0, 4562.0], [684.0, 4479.0], [687.0, 4543.0], [672.0, 4586.0], [686.0, 4536.0], [695.0, 2680.0], [694.0, 4678.0], [693.0, 5420.0], [692.0, 4502.0], [691.0, 4534.0], [690.0, 4468.0], [689.0, 4523.0], [688.0, 1233.0], [703.0, 4639.0], [702.0, 4669.0], [700.0, 4578.0], [699.0, 4654.0], [730.0, 3219.5], [704.0, 3309.0], [705.0, 4620.0], [707.0, 4550.0], [706.0, 4571.0], [709.0, 4453.0], [708.0, 4439.0], [719.0, 4331.0], [718.0, 4356.0], [717.0, 4357.0], [716.0, 4348.0], [715.0, 4390.0], [714.0, 4362.0], [713.0, 4369.0], [712.0, 4346.0], [710.0, 3213.0], [729.0, 3147.5], [728.0, 4229.0], [711.0, 4406.0], [733.0, 3151.0], [735.0, 4182.0], [721.0, 4336.0], [720.0, 4290.0], [723.0, 4288.0], [722.0, 4325.0], [725.0, 4242.0], [724.0, 4277.0], [727.0, 4237.0], [726.0, 4240.0], [734.0, 4175.0], [732.0, 4189.0], [731.0, 4188.0], [765.0, 4093.0], [759.0, 3203.5], [758.0, 4363.0], [757.0, 4223.0], [756.0, 4421.0], [755.0, 4395.0], [754.0, 4196.0], [753.0, 4058.0], [752.0, 4258.0], [762.0, 3206.5], [767.0, 3083.5], [766.0, 3950.0], [764.0, 4115.0], [763.0, 3973.0], [761.0, 4041.0], [760.0, 4155.0], [743.0, 4067.0], [742.0, 4099.0], [741.0, 4071.0], [740.0, 4096.0], [739.0, 4086.0], [738.0, 4113.0], [737.0, 4147.0], [736.0, 4183.0], [751.0, 4029.0], [750.0, 4050.0], [749.0, 1622.0], [748.0, 4083.0], [747.0, 4093.0], [746.0, 4055.0], [745.0, 4113.0], [744.0, 4066.0], [794.0, 3782.0], [768.0, 3112.0], [780.0, 3152.5], [779.0, 3995.0], [778.0, 3781.0], [777.0, 3888.0], [776.0, 3891.0], [781.0, 3806.0], [783.0, 4005.0], [782.0, 4166.0], [793.0, 3110.5], [792.0, 3845.0], [775.0, 3852.0], [774.0, 3954.0], [773.0, 3871.0], [772.0, 3875.0], [771.0, 4053.0], [770.0, 3855.0], [769.0, 4163.0], [796.0, 2852.3333333333335], [799.0, 3616.0], [785.0, 3821.0], [784.0, 3786.0], [787.0, 3918.0], [786.0, 3963.0], [789.0, 3867.0], [788.0, 3904.0], [791.0, 3788.0], [790.0, 3671.0], [798.0, 3710.0], [797.0, 3517.0], [795.0, 3678.0], [825.0, 3330.0], [829.0, 3036.0], [801.0, 3136.0], [800.0, 3836.0], [803.0, 3644.0], [802.0, 3736.0], [815.0, 3413.0], [814.0, 3612.0], [813.0, 3523.0], [812.0, 3716.0], [811.0, 3465.0], [810.0, 3662.0], [809.0, 3538.0], [808.0, 3630.0], [804.0, 3104.5], [807.0, 3101.0], [806.0, 3477.0], [805.0, 3668.0], [824.0, 3565.0], [826.0, 3464.0], [816.0, 3223.0], [819.0, 3058.0], [818.0, 3356.0], [817.0, 3344.0], [821.0, 3392.0], [820.0, 3487.0], [823.0, 3396.0], [822.0, 3561.0], [830.0, 2870.5], [831.0, 3378.0], [828.0, 3336.0], [827.0, 3550.0], [858.0, 3191.0], [862.0, 2958.5], [838.0, 2817.0], [837.0, 3451.0], [836.0, 3179.0], [835.0, 3334.0], [834.0, 3483.0], [833.0, 3469.0], [832.0, 3319.0], [847.0, 3083.0], [846.0, 3248.0], [845.0, 3134.0], [844.0, 3398.0], [843.0, 3261.0], [842.0, 3110.0], [841.0, 3343.0], [840.0, 3202.0], [839.0, 2902.0], [852.0, 2786.0], [853.0, 2876.5], [855.0, 3205.0], [854.0, 3276.0], [863.0, 3042.0], [849.0, 3168.0], [848.0, 3132.0], [851.0, 1994.0], [850.0, 3061.0], [861.0, 3081.0], [860.0, 3229.0], [859.0, 3101.0], [857.0, 3011.0], [856.0, 2947.0], [866.0, 2862.5], [876.0, 2784.0], [875.0, 2850.0], [874.0, 2975.0], [873.0, 2972.0], [872.0, 3080.0], [877.0, 2851.5], [878.0, 2796.5], [879.0, 2922.0], [865.0, 3108.0], [864.0, 2976.0], [880.0, 2778.0], [886.0, 2869.0], [885.0, 2923.0], [884.0, 2917.0], [883.0, 2937.0], [882.0, 2780.0], [881.0, 2795.0], [887.0, 2899.0], [891.0, 2920.0], [890.0, 2914.0], [889.0, 2888.0], [888.0, 2918.0], [871.0, 2984.0], [870.0, 3027.0], [869.0, 2994.0], [868.0, 3081.0], [867.0, 3036.0], [1.0, 6316.0]], "isOverall": false, "label": "GetAll", "isController": false}, {"data": [[455.16499999999974, 4992.646000000002]], "isOverall": false, "label": "GetAll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 891.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5933.333333333333, "minX": 1.68062094E12, "maxY": 1726829.45, "series": [{"data": [[1.68062094E12, 1726829.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68062094E12, 5933.333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062094E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3167.704, "minX": 1.68062094E12, "maxY": 4992.646000000002, "series": [{"data": [[1.68062094E12, 3167.704]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[1.68062094E12, 4992.646000000002]], "isOverall": false, "label": "GetAll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062094E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3164.620999999997, "minX": 1.68062094E12, "maxY": 4926.127999999997, "series": [{"data": [[1.68062094E12, 3164.620999999997]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[1.68062094E12, 4926.127999999997]], "isOverall": false, "label": "GetAll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062094E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68062094E12, "maxY": 3.3530000000000006, "series": [{"data": [[1.68062094E12, 3.3530000000000006]], "isOverall": false, "label": "Create", "isController": false}, {"data": [[1.68062094E12, 0.0]], "isOverall": false, "label": "GetAll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062094E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 115.0, "minX": 1.68062094E12, "maxY": 8395.0, "series": [{"data": [[1.68062094E12, 8395.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68062094E12, 6629.300000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68062094E12, 7318.95]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68062094E12, 6968.749999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68062094E12, 115.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68062094E12, 4395.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062094E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 274.0, "minX": 38.0, "maxY": 7274.5, "series": [{"data": [[38.0, 7274.5], [167.0, 4798.0], [176.0, 4086.0], [199.0, 1347.0], [197.0, 5060.0], [206.0, 4336.5], [59.0, 274.0], [61.0, 5090.0], [69.0, 4913.0], [70.0, 6350.0], [74.0, 5350.0], [78.0, 6020.0], [82.0, 6696.0], [91.0, 2667.0], [97.0, 7024.0], [107.0, 1340.0], [109.0, 1944.0], [120.0, 3350.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 206.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 233.0, "minX": 38.0, "maxY": 7197.0, "series": [{"data": [[38.0, 7197.0], [167.0, 4774.0], [176.0, 4067.5], [199.0, 1346.0], [197.0, 5047.0], [206.0, 4325.0], [59.0, 233.0], [61.0, 5043.0], [69.0, 4845.0], [70.0, 6304.5], [74.0, 5290.0], [78.0, 5957.0], [82.0, 6639.5], [91.0, 2648.0], [97.0, 6949.0], [107.0, 1338.0], [109.0, 1916.0], [120.0, 3305.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 206.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.68062094E12, "maxY": 33.333333333333336, "series": [{"data": [[1.68062094E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062094E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.68062094E12, "maxY": 33.333333333333336, "series": [{"data": [[1.68062094E12, 33.333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68062094E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.68062094E12, "maxY": 16.666666666666668, "series": [{"data": [[1.68062094E12, 16.666666666666668]], "isOverall": false, "label": "Create-success", "isController": false}, {"data": [[1.68062094E12, 16.666666666666668]], "isOverall": false, "label": "GetAll-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062094E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.68062094E12, "maxY": 33.333333333333336, "series": [{"data": [[1.68062094E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68062094E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

